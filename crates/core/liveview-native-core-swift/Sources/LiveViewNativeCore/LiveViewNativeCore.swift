// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(LiveViewNativeCoreFFI)
    import LiveViewNativeCoreFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len: 0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_liveview_native_core_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_liveview_native_core_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_UNEXPECTED_ERROR: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_UNEXPECTED_ERROR:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void
) {
    do {
        try writeReturn(makeCall())
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void,
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

    func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        map.count
    }
}

// Public interface members begin here.

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public protocol DocumentProtocol: AnyObject {
    func children(_ nodeRef: NodeRef) -> [NodeRef]

    func get(_ nodeRef: NodeRef) -> NodeData

    func getAttributes(_ nodeRef: NodeRef) -> [Attribute]

    func getNode(_ nodeRef: NodeRef) -> Node

    func getParent(_ nodeRef: NodeRef) -> NodeRef?

    func mergeFragmentJson(_ json: String) throws

    func nextUploadId() -> UInt64

    func render() -> String

    func root() -> NodeRef

    func setEventHandler(_ handler: DocumentChangeHandler)
}

open class Document:
    DocumentProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_liveview_native_core_fn_clone_document(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_liveview_native_core_fn_free_document(pointer, $0) }
    }

    public static func empty() -> Document {
        return try! FfiConverterTypeDocument.lift(try! rustCall {
            uniffi_liveview_native_core_fn_constructor_document_empty($0
            )
        })
    }

    public static func parse(_ input: String) throws -> Document {
        return try FfiConverterTypeDocument.lift(rustCallWithError(FfiConverterTypeParseError.lift) {
            uniffi_liveview_native_core_fn_constructor_document_parse(
                FfiConverterString.lower(input), $0
            )
        })
    }

    public static func parseFragmentJson(_ input: String) throws -> Document {
        return try FfiConverterTypeDocument.lift(rustCallWithError(FfiConverterTypeRenderError.lift) {
            uniffi_liveview_native_core_fn_constructor_document_parse_fragment_json(
                FfiConverterString.lower(input), $0
            )
        })
    }

    open func children(_ nodeRef: NodeRef) -> [NodeRef] {
        return try! FfiConverterSequenceTypeNodeRef.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_document_children(self.uniffiClonePointer(),
                                                                    FfiConverterTypeNodeRef.lower(nodeRef), $0)
        })
    }

    open func get(_ nodeRef: NodeRef) -> NodeData {
        return try! FfiConverterTypeNodeData.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_document_get(self.uniffiClonePointer(),
                                                               FfiConverterTypeNodeRef.lower(nodeRef), $0)
        })
    }

    open func getAttributes(_ nodeRef: NodeRef) -> [Attribute] {
        return try! FfiConverterSequenceTypeAttribute.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_document_get_attributes(self.uniffiClonePointer(),
                                                                          FfiConverterTypeNodeRef.lower(nodeRef), $0)
        })
    }

    open func getNode(_ nodeRef: NodeRef) -> Node {
        return try! FfiConverterTypeNode.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_document_get_node(self.uniffiClonePointer(),
                                                                    FfiConverterTypeNodeRef.lower(nodeRef), $0)
        })
    }

    open func getParent(_ nodeRef: NodeRef) -> NodeRef? {
        return try! FfiConverterOptionTypeNodeRef.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_document_get_parent(self.uniffiClonePointer(),
                                                                      FfiConverterTypeNodeRef.lower(nodeRef), $0)
        })
    }

    open func mergeFragmentJson(_ json: String) throws { try rustCallWithError(FfiConverterTypeRenderError.lift) {
        uniffi_liveview_native_core_fn_method_document_merge_fragment_json(self.uniffiClonePointer(),
                                                                           FfiConverterString.lower(json), $0)
    }
    }

    open func nextUploadId() -> UInt64 {
        return try! FfiConverterUInt64.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_document_next_upload_id(self.uniffiClonePointer(), $0)
        })
    }

    open func render() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_document_render(self.uniffiClonePointer(), $0)
        })
    }

    open func root() -> NodeRef {
        return try! FfiConverterTypeNodeRef.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_document_root(self.uniffiClonePointer(), $0)
        })
    }

    open func setEventHandler(_ handler: DocumentChangeHandler) { try! rustCall {
        uniffi_liveview_native_core_fn_method_document_set_event_handler(self.uniffiClonePointer(),
                                                                         FfiConverterCallbackInterfaceDocumentChangeHandler.lower(handler), $0)
    }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeDocument: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Document

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Document {
        return Document(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Document) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Document {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Document, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDocument_lift(_ pointer: UnsafeMutableRawPointer) throws -> Document {
    return try FfiConverterTypeDocument.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDocument_lower(_ value: Document) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDocument.lower(value)
}

public protocol LiveChannelProtocol: AnyObject {
    func channel() -> Channel

    func constructUpload(_ contents: Data, _ mimeType: String, _ path: String, _ phxTargetName: String) throws -> LiveFile

    func document() -> Document

    func joinPayload() -> Payload

    func mergeDiffs() async throws

    func setEventHandler(_ handler: DocumentChangeHandler)

    func uploadFile(_ file: LiveFile) async throws
}

open class LiveChannel:
    LiveChannelProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_liveview_native_core_fn_clone_livechannel(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_liveview_native_core_fn_free_livechannel(pointer, $0) }
    }

    open func channel() -> Channel {
        return try! FfiConverterTypeChannel_lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_livechannel_channel(self.uniffiClonePointer(), $0)
        })
    }

    open func constructUpload(_ contents: Data, _ mimeType: String, _ path: String, _ phxTargetName: String) throws -> LiveFile {
        return try FfiConverterTypeLiveFile.lift(rustCallWithError(FfiConverterTypeLiveSocketError.lift) {
            uniffi_liveview_native_core_fn_method_livechannel_construct_upload(self.uniffiClonePointer(),
                                                                               FfiConverterData.lower(contents),
                                                                               FfiConverterString.lower(mimeType),
                                                                               FfiConverterString.lower(path),
                                                                               FfiConverterString.lower(phxTargetName), $0)
        })
    }

    open func document() -> Document {
        return try! FfiConverterTypeDocument.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_livechannel_document(self.uniffiClonePointer(), $0)
        })
    }

    open func joinPayload() -> Payload {
        return try! FfiConverterTypePayload_lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_livechannel_join_payload(self.uniffiClonePointer(), $0)
        })
    }

    open func mergeDiffs() async throws {
        return
            try await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_liveview_native_core_fn_method_livechannel_merge_diffs(
                        self.uniffiClonePointer()
                    )
                },
                pollFunc: ffi_liveview_native_core_rust_future_poll_void,
                completeFunc: ffi_liveview_native_core_rust_future_complete_void,
                freeFunc: ffi_liveview_native_core_rust_future_free_void,
                liftFunc: { $0 },
                errorHandler: FfiConverterTypeLiveSocketError.lift
            )
    }

    open func setEventHandler(_ handler: DocumentChangeHandler) { try! rustCall {
        uniffi_liveview_native_core_fn_method_livechannel_set_event_handler(self.uniffiClonePointer(),
                                                                            FfiConverterCallbackInterfaceDocumentChangeHandler.lower(handler), $0)
    }
    }

    open func uploadFile(_ file: LiveFile) async throws {
        return
            try await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_liveview_native_core_fn_method_livechannel_upload_file(
                        self.uniffiClonePointer(),
                        FfiConverterTypeLiveFile.lower(file)
                    )
                },
                pollFunc: ffi_liveview_native_core_rust_future_poll_void,
                completeFunc: ffi_liveview_native_core_rust_future_complete_void,
                freeFunc: ffi_liveview_native_core_rust_future_free_void,
                liftFunc: { $0 },
                errorHandler: FfiConverterTypeLiveSocketError.lift
            )
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeLiveChannel: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LiveChannel

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LiveChannel {
        return LiveChannel(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LiveChannel) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LiveChannel {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LiveChannel, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeLiveChannel_lift(_ pointer: UnsafeMutableRawPointer) throws -> LiveChannel {
    return try FfiConverterTypeLiveChannel.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeLiveChannel_lower(_ value: LiveChannel) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLiveChannel.lower(value)
}

public protocol LiveFileProtocol: AnyObject {}

open class LiveFile:
    LiveFileProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_liveview_native_core_fn_clone_livefile(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_liveview_native_core_fn_free_livefile(pointer, $0) }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeLiveFile: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LiveFile

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LiveFile {
        return LiveFile(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LiveFile) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LiveFile {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LiveFile, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeLiveFile_lift(_ pointer: UnsafeMutableRawPointer) throws -> LiveFile {
    return try FfiConverterTypeLiveFile.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeLiveFile_lower(_ value: LiveFile) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLiveFile.lower(value)
}

public protocol LiveSocketProtocol: AnyObject {
    func deadRender() -> Document

    func hasLiveReload() -> Bool

    func joinLivereloadChannel() async throws -> LiveChannel

    func joinLiveviewChannel(_ joinParams: [String: Json]?, _ redirect: String?) async throws -> LiveChannel

    func socket() -> Socket

    func styleUrls() -> [String]
}

open class LiveSocket:
    LiveSocketProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_liveview_native_core_fn_clone_livesocket(self.pointer, $0) }
    }

    public convenience init(_ url: String, _ format: String, _ options: ConnectOpts?) async throws {
        let pointer =
            try await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_liveview_native_core_fn_constructor_livesocket_new(FfiConverterString.lower(url), FfiConverterString.lower(format), FfiConverterOptionTypeConnectOpts.lower(options))
                },
                pollFunc: ffi_liveview_native_core_rust_future_poll_pointer,
                completeFunc: ffi_liveview_native_core_rust_future_complete_pointer,
                freeFunc: ffi_liveview_native_core_rust_future_free_pointer,
                liftFunc: FfiConverterTypeLiveSocket.lift,
                errorHandler: FfiConverterTypeLiveSocketError.lift
            )

            .uniffiClonePointer()
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_liveview_native_core_fn_free_livesocket(pointer, $0) }
    }

    public static func connect(_ url: String, _ format: String, _ options: ConnectOpts?) async throws -> LiveSocket {
        return
            try await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_liveview_native_core_fn_constructor_livesocket_connect(FfiConverterString.lower(url), FfiConverterString.lower(format), FfiConverterOptionTypeConnectOpts.lower(options))
                },
                pollFunc: ffi_liveview_native_core_rust_future_poll_pointer,
                completeFunc: ffi_liveview_native_core_rust_future_complete_pointer,
                freeFunc: ffi_liveview_native_core_rust_future_free_pointer,
                liftFunc: FfiConverterTypeLiveSocket.lift,
                errorHandler: FfiConverterTypeLiveSocketError.lift
            )
    }

    open func deadRender() -> Document {
        return try! FfiConverterTypeDocument.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_livesocket_dead_render(self.uniffiClonePointer(), $0)
        })
    }

    open func hasLiveReload() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_livesocket_has_live_reload(self.uniffiClonePointer(), $0)
        })
    }

    open func joinLivereloadChannel() async throws -> LiveChannel {
        return
            try await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_liveview_native_core_fn_method_livesocket_join_livereload_channel(
                        self.uniffiClonePointer()
                    )
                },
                pollFunc: ffi_liveview_native_core_rust_future_poll_pointer,
                completeFunc: ffi_liveview_native_core_rust_future_complete_pointer,
                freeFunc: ffi_liveview_native_core_rust_future_free_pointer,
                liftFunc: FfiConverterTypeLiveChannel.lift,
                errorHandler: FfiConverterTypeLiveSocketError.lift
            )
    }

    open func joinLiveviewChannel(_ joinParams: [String: Json]?, _ redirect: String?) async throws -> LiveChannel {
        return
            try await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_liveview_native_core_fn_method_livesocket_join_liveview_channel(
                        self.uniffiClonePointer(),
                        FfiConverterOptionDictionaryStringTypeJSON.lower(joinParams), FfiConverterOptionString.lower(redirect)
                    )
                },
                pollFunc: ffi_liveview_native_core_rust_future_poll_pointer,
                completeFunc: ffi_liveview_native_core_rust_future_complete_pointer,
                freeFunc: ffi_liveview_native_core_rust_future_free_pointer,
                liftFunc: FfiConverterTypeLiveChannel.lift,
                errorHandler: FfiConverterTypeLiveSocketError.lift
            )
    }

    open func socket() -> Socket {
        return try! FfiConverterTypeSocket_lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_livesocket_socket(self.uniffiClonePointer(), $0)
        })
    }

    open func styleUrls() -> [String] {
        return try! FfiConverterSequenceString.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_livesocket_style_urls(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeLiveSocket: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LiveSocket

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LiveSocket {
        return LiveSocket(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LiveSocket) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LiveSocket {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LiveSocket, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeLiveSocket_lift(_ pointer: UnsafeMutableRawPointer) throws -> LiveSocket {
    return try FfiConverterTypeLiveSocket.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeLiveSocket_lower(_ value: LiveSocket) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLiveSocket.lower(value)
}

public protocol NodeProtocol: AnyObject {
    func attributes() -> [Attribute]

    func data() -> NodeData

    func display() -> String

    func document() -> Document

    func getAttribute(_ name: AttributeName) -> Attribute?

    func getChildren() -> [Node]

    func getDepthFirstChildren() -> [Node]

    func id() -> NodeRef
}

open class Node:
    NodeProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_liveview_native_core_fn_clone_node(self.pointer, $0) }
    }

    public convenience init(_ document: Document, _ id: NodeRef, _ data: NodeData) {
        let pointer =
            try! rustCall {
                uniffi_liveview_native_core_fn_constructor_node_new(
                    FfiConverterTypeDocument.lower(document),
                    FfiConverterTypeNodeRef.lower(id),
                    FfiConverterTypeNodeData.lower(data), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_liveview_native_core_fn_free_node(pointer, $0) }
    }

    open func attributes() -> [Attribute] {
        return try! FfiConverterSequenceTypeAttribute.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_node_attributes(self.uniffiClonePointer(), $0)
        })
    }

    open func data() -> NodeData {
        return try! FfiConverterTypeNodeData.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_node_data(self.uniffiClonePointer(), $0)
        })
    }

    open func display() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_node_display(self.uniffiClonePointer(), $0)
        })
    }

    open func document() -> Document {
        return try! FfiConverterTypeDocument.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_node_document(self.uniffiClonePointer(), $0)
        })
    }

    open func getAttribute(_ name: AttributeName) -> Attribute? {
        return try! FfiConverterOptionTypeAttribute.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_node_get_attribute(self.uniffiClonePointer(),
                                                                     FfiConverterTypeAttributeName.lower(name), $0)
        })
    }

    open func getChildren() -> [Node] {
        return try! FfiConverterSequenceTypeNode.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_node_get_children(self.uniffiClonePointer(), $0)
        })
    }

    open func getDepthFirstChildren() -> [Node] {
        return try! FfiConverterSequenceTypeNode.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_node_get_depth_first_children(self.uniffiClonePointer(), $0)
        })
    }

    open func id() -> NodeRef {
        return try! FfiConverterTypeNodeRef.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_node_id(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeNode: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Node

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Node {
        return Node(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Node) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Node {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Node, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeNode_lift(_ pointer: UnsafeMutableRawPointer) throws -> Node {
    return try FfiConverterTypeNode.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeNode_lower(_ value: Node) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNode.lower(value)
}

public protocol NodeRefProtocol: AnyObject {
    func ref() -> Int32
}

open class NodeRef:
    NodeRefProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_liveview_native_core_fn_clone_noderef(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_liveview_native_core_fn_free_noderef(pointer, $0) }
    }

    open func ref() -> Int32 {
        return try! FfiConverterInt32.lift(try! rustCall {
            uniffi_liveview_native_core_fn_method_noderef_ref(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeNodeRef: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NodeRef

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NodeRef {
        return NodeRef(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NodeRef) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NodeRef {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NodeRef, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeNodeRef_lift(_ pointer: UnsafeMutableRawPointer) throws -> NodeRef {
    return try FfiConverterTypeNodeRef.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeNodeRef_lower(_ value: NodeRef) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNodeRef.lower(value)
}

public struct Attribute {
    public var name: AttributeName
    public var value: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: AttributeName, value: String?) {
        self.name = name
        self.value = value
    }
}

extension Attribute: Equatable, Hashable {
    public static func == (lhs: Attribute, rhs: Attribute) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(value)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeAttribute: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Attribute {
        return
            try Attribute(
                name: FfiConverterTypeAttributeName.read(from: &buf),
                value: FfiConverterOptionString.read(from: &buf)
            )
    }

    public static func write(_ value: Attribute, into buf: inout [UInt8]) {
        FfiConverterTypeAttributeName.write(value.name, into: &buf)
        FfiConverterOptionString.write(value.value, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAttribute_lift(_ buf: RustBuffer) throws -> Attribute {
    return try FfiConverterTypeAttribute.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAttribute_lower(_ value: Attribute) -> RustBuffer {
    return FfiConverterTypeAttribute.lower(value)
}

/**
 * Represents the fully-qualified name of an attribute
 */
public struct AttributeName {
    /**
     * This is used by svg attributes, e.g. `xlink-href`
     */
    public var namespace: String?
    public var name: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * This is used by svg attributes, e.g. `xlink-href`
         */ namespace: String?, name: String
    ) {
        self.namespace = namespace
        self.name = name
    }
}

extension AttributeName: Equatable, Hashable {
    public static func == (lhs: AttributeName, rhs: AttributeName) -> Bool {
        if lhs.namespace != rhs.namespace {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(namespace)
        hasher.combine(name)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeAttributeName: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AttributeName {
        return
            try AttributeName(
                namespace: FfiConverterOptionString.read(from: &buf),
                name: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: AttributeName, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.namespace, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAttributeName_lift(_ buf: RustBuffer) throws -> AttributeName {
    return try FfiConverterTypeAttributeName.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAttributeName_lower(_ value: AttributeName) -> RustBuffer {
    return FfiConverterTypeAttributeName.lower(value)
}

public struct ConnectOpts {
    public var headers: [String: String]?
    public var body: String?
    public var method: String
    public var timeoutMs: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(headers: [String: String]? = nil, body: String? = nil, method: String = "GET", timeoutMs: UInt64 = UInt64(30000)) {
        self.headers = headers
        self.body = body
        self.method = method
        self.timeoutMs = timeoutMs
    }
}

extension ConnectOpts: Equatable, Hashable {
    public static func == (lhs: ConnectOpts, rhs: ConnectOpts) -> Bool {
        if lhs.headers != rhs.headers {
            return false
        }
        if lhs.body != rhs.body {
            return false
        }
        if lhs.method != rhs.method {
            return false
        }
        if lhs.timeoutMs != rhs.timeoutMs {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(headers)
        hasher.combine(body)
        hasher.combine(method)
        hasher.combine(timeoutMs)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeConnectOpts: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectOpts {
        return
            try ConnectOpts(
                headers: FfiConverterOptionDictionaryStringString.read(from: &buf),
                body: FfiConverterOptionString.read(from: &buf),
                method: FfiConverterString.read(from: &buf),
                timeoutMs: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: ConnectOpts, into buf: inout [UInt8]) {
        FfiConverterOptionDictionaryStringString.write(value.headers, into: &buf)
        FfiConverterOptionString.write(value.body, into: &buf)
        FfiConverterString.write(value.method, into: &buf)
        FfiConverterUInt64.write(value.timeoutMs, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectOpts_lift(_ buf: RustBuffer) throws -> ConnectOpts {
    return try FfiConverterTypeConnectOpts.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectOpts_lower(_ value: ConnectOpts) -> RustBuffer {
    return FfiConverterTypeConnectOpts.lower(value)
}

/**
 * An `Element` is a typed node in a document, with the ability to carry attributes and contain other nodes.
 */
public struct Element {
    public var name: ElementName
    public var attributes: [Attribute]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: ElementName, attributes: [Attribute]) {
        self.name = name
        self.attributes = attributes
    }
}

extension Element: Equatable, Hashable {
    public static func == (lhs: Element, rhs: Element) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.attributes != rhs.attributes {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(attributes)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeElement: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Element {
        return
            try Element(
                name: FfiConverterTypeElementName.read(from: &buf),
                attributes: FfiConverterSequenceTypeAttribute.read(from: &buf)
            )
    }

    public static func write(_ value: Element, into buf: inout [UInt8]) {
        FfiConverterTypeElementName.write(value.name, into: &buf)
        FfiConverterSequenceTypeAttribute.write(value.attributes, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeElement_lift(_ buf: RustBuffer) throws -> Element {
    return try FfiConverterTypeElement.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeElement_lower(_ value: Element) -> RustBuffer {
    return FfiConverterTypeElement.lower(value)
}

/**
 * Represents the fully-qualified name of an element
 */
public struct ElementName {
    public var namespace: String?
    public var name: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(namespace: String?, name: String) {
        self.namespace = namespace
        self.name = name
    }
}

extension ElementName: Equatable, Hashable {
    public static func == (lhs: ElementName, rhs: ElementName) -> Bool {
        if lhs.namespace != rhs.namespace {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(namespace)
        hasher.combine(name)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeElementName: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ElementName {
        return
            try ElementName(
                namespace: FfiConverterOptionString.read(from: &buf),
                name: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: ElementName, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.namespace, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeElementName_lift(_ buf: RustBuffer) throws -> ElementName {
    return try FfiConverterTypeElementName.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeElementName_lower(_ value: ElementName) -> RustBuffer {
    return FfiConverterTypeElementName.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ChangeType {
    case change
    case add
    case remove
    case replace
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeChangeType: FfiConverterRustBuffer {
    typealias SwiftType = ChangeType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChangeType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .change

        case 2: return .add

        case 3: return .remove

        case 4: return .replace

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ChangeType, into buf: inout [UInt8]) {
        switch value {
        case .change:
            writeInt(&buf, Int32(1))

        case .add:
            writeInt(&buf, Int32(2))

        case .remove:
            writeInt(&buf, Int32(3))

        case .replace:
            writeInt(&buf, Int32(4))
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeChangeType_lift(_ buf: RustBuffer) throws -> ChangeType {
    return try FfiConverterTypeChangeType.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeChangeType_lower(_ value: ChangeType) -> RustBuffer {
    return FfiConverterTypeChangeType.lower(value)
}

extension ChangeType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum EventType {
    case changed
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeEventType: FfiConverterRustBuffer {
    typealias SwiftType = EventType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EventType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .changed

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: EventType, into buf: inout [UInt8]) {
        switch value {
        case .changed:
            writeInt(&buf, Int32(1))
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEventType_lift(_ buf: RustBuffer) throws -> EventType {
    return try FfiConverterTypeEventType.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeEventType_lower(_ value: EventType) -> RustBuffer {
    return FfiConverterTypeEventType.lower(value)
}

extension EventType: Equatable, Hashable {}

public enum LiveSocketError {
    case PayloadNotJson
    case MimeType(error: String
    )
    case InvalidHeader(error: String
    )
    case InvalidMethod(error: String
    )
    case Phoenix(error: String
    )
    case Request(error: String
    )
    case Parse(error: ParseError
    )
    case JsonDeserialization(error: String
    )
    case CsfrTokenMissing
    case PhoenixIdMissing
    case PhoenixSessionMissing
    case PhoenixStaticMissing
    case PhoenixMainMissing
    case NoHostInUrl
    case NoUploadToken
    case NoLiveReloadUrl
    case SchemeNotSupported(scheme: String
    )
    case Upload(error: UploadError
    )
    case NoDocumentInJoinPayload
    case DocumentMerge(error: MergeError
    )
    case DocumentRender(error: RenderError
    )
    case NoInputRefInDocument
    case Serde(error: String
    )
    case Events(error: String
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeLiveSocketError: FfiConverterRustBuffer {
    typealias SwiftType = LiveSocketError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LiveSocketError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .PayloadNotJson
        case 2: return try .MimeType(
                error: FfiConverterString.read(from: &buf)
            )
        case 3: return try .InvalidHeader(
                error: FfiConverterString.read(from: &buf)
            )
        case 4: return try .InvalidMethod(
                error: FfiConverterString.read(from: &buf)
            )
        case 5: return try .Phoenix(
                error: FfiConverterString.read(from: &buf)
            )
        case 6: return try .Request(
                error: FfiConverterString.read(from: &buf)
            )
        case 7: return try .Parse(
                error: FfiConverterTypeParseError.read(from: &buf)
            )
        case 8: return try .JsonDeserialization(
                error: FfiConverterString.read(from: &buf)
            )
        case 9: return .CsfrTokenMissing
        case 10: return .PhoenixIdMissing
        case 11: return .PhoenixSessionMissing
        case 12: return .PhoenixStaticMissing
        case 13: return .PhoenixMainMissing
        case 14: return .NoHostInUrl
        case 15: return .NoUploadToken
        case 16: return .NoLiveReloadUrl
        case 17: return try .SchemeNotSupported(
                scheme: FfiConverterString.read(from: &buf)
            )
        case 18: return try .Upload(
                error: FfiConverterTypeUploadError.read(from: &buf)
            )
        case 19: return .NoDocumentInJoinPayload
        case 20: return try .DocumentMerge(
                error: FfiConverterTypeMergeError.read(from: &buf)
            )
        case 21: return try .DocumentRender(
                error: FfiConverterTypeRenderError.read(from: &buf)
            )
        case 22: return .NoInputRefInDocument
        case 23: return try .Serde(
                error: FfiConverterString.read(from: &buf)
            )
        case 24: return try .Events(
                error: FfiConverterString.read(from: &buf)
            )
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LiveSocketError, into buf: inout [UInt8]) {
        switch value {
        case .PayloadNotJson:
            writeInt(&buf, Int32(1))

        case let .MimeType(error):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(error, into: &buf)

        case let .InvalidHeader(error):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(error, into: &buf)

        case let .InvalidMethod(error):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(error, into: &buf)

        case let .Phoenix(error):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(error, into: &buf)

        case let .Request(error):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(error, into: &buf)

        case let .Parse(error):
            writeInt(&buf, Int32(7))
            FfiConverterTypeParseError.write(error, into: &buf)

        case let .JsonDeserialization(error):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(error, into: &buf)

        case .CsfrTokenMissing:
            writeInt(&buf, Int32(9))

        case .PhoenixIdMissing:
            writeInt(&buf, Int32(10))

        case .PhoenixSessionMissing:
            writeInt(&buf, Int32(11))

        case .PhoenixStaticMissing:
            writeInt(&buf, Int32(12))

        case .PhoenixMainMissing:
            writeInt(&buf, Int32(13))

        case .NoHostInUrl:
            writeInt(&buf, Int32(14))

        case .NoUploadToken:
            writeInt(&buf, Int32(15))

        case .NoLiveReloadUrl:
            writeInt(&buf, Int32(16))

        case let .SchemeNotSupported(scheme):
            writeInt(&buf, Int32(17))
            FfiConverterString.write(scheme, into: &buf)

        case let .Upload(error):
            writeInt(&buf, Int32(18))
            FfiConverterTypeUploadError.write(error, into: &buf)

        case .NoDocumentInJoinPayload:
            writeInt(&buf, Int32(19))

        case let .DocumentMerge(error):
            writeInt(&buf, Int32(20))
            FfiConverterTypeMergeError.write(error, into: &buf)

        case let .DocumentRender(error):
            writeInt(&buf, Int32(21))
            FfiConverterTypeRenderError.write(error, into: &buf)

        case .NoInputRefInDocument:
            writeInt(&buf, Int32(22))

        case let .Serde(error):
            writeInt(&buf, Int32(23))
            FfiConverterString.write(error, into: &buf)

        case let .Events(error):
            writeInt(&buf, Int32(24))
            FfiConverterString.write(error, into: &buf)
        }
    }
}

extension LiveSocketError: Equatable, Hashable {}

extension LiveSocketError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

public enum MergeError {
    case FragmentTypeMismatch
    case CreateComponentFromUpdate
    case CreateChildFromUpdateFragment
    case AddChildToExisting
    case StreamIdMismatch
    case Stream(error: StreamConversionError
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeMergeError: FfiConverterRustBuffer {
    typealias SwiftType = MergeError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MergeError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .FragmentTypeMismatch
        case 2: return .CreateComponentFromUpdate
        case 3: return .CreateChildFromUpdateFragment
        case 4: return .AddChildToExisting
        case 5: return .StreamIdMismatch
        case 6: return try .Stream(
                error: FfiConverterTypeStreamConversionError.read(from: &buf)
            )
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MergeError, into buf: inout [UInt8]) {
        switch value {
        case .FragmentTypeMismatch:
            writeInt(&buf, Int32(1))

        case .CreateComponentFromUpdate:
            writeInt(&buf, Int32(2))

        case .CreateChildFromUpdateFragment:
            writeInt(&buf, Int32(3))

        case .AddChildToExisting:
            writeInt(&buf, Int32(4))

        case .StreamIdMismatch:
            writeInt(&buf, Int32(5))

        case let .Stream(error):
            writeInt(&buf, Int32(6))
            FfiConverterTypeStreamConversionError.write(error, into: &buf)
        }
    }
}

extension MergeError: Equatable, Hashable {}

extension MergeError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * This enum represents the valid node types of a `Document` tree
 */

public enum NodeData {
    /**
     * A marker node that indicates the root of a document
     *
     * A document may only have a single root, and it has no attributes
     */
    case root
    /**
     * A typed node that can carry attributes and may contain other nodes
     */
    case nodeElement(element: Element
    )
    /**
     * A leaf node is an untyped node, typically text, and does not have any attributes or children
     */
    case leaf(value: String
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeNodeData: FfiConverterRustBuffer {
    typealias SwiftType = NodeData

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NodeData {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .root

        case 2: return try .nodeElement(element: FfiConverterTypeElement.read(from: &buf)
            )

        case 3: return try .leaf(value: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NodeData, into buf: inout [UInt8]) {
        switch value {
        case .root:
            writeInt(&buf, Int32(1))

        case let .nodeElement(element):
            writeInt(&buf, Int32(2))
            FfiConverterTypeElement.write(element, into: &buf)

        case let .leaf(value):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(value, into: &buf)
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeNodeData_lift(_ buf: RustBuffer) throws -> NodeData {
    return try FfiConverterTypeNodeData.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeNodeData_lower(_ value: NodeData) -> RustBuffer {
    return FfiConverterTypeNodeData.lower(value)
}

extension NodeData: Equatable, Hashable {}

/**
 * Represents the possible types of failure that can occur while parsing a `Document`
 */
public enum ParseError {
    case Reader(message: String)

    case Tokenizer(message: String)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeParseError: FfiConverterRustBuffer {
    typealias SwiftType = ParseError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ParseError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .Reader(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .Tokenizer(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ParseError, into buf: inout [UInt8]) {
        switch value {
        case .Reader(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        case .Tokenizer(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(2))
        }
    }
}

extension ParseError: Equatable, Hashable {}

extension ParseError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

public enum RenderError {
    case NoComponents(message: String)

    case NoTemplates(message: String)

    case TemplateNotFound(message: String)

    case ComponentNotFound(message: String)

    case MergeError(message: String)

    case ChildNotFoundForTemplate(message: String)

    case ChildNotFoundForStatic(message: String)

    case CousinNotFound(message: String)

    case SerdeError(message: String)

    case ParseError(message: String)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeRenderError: FfiConverterRustBuffer {
    typealias SwiftType = RenderError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RenderError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .NoComponents(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .NoTemplates(
                message: FfiConverterString.read(from: &buf)
            )

        case 3: return try .TemplateNotFound(
                message: FfiConverterString.read(from: &buf)
            )

        case 4: return try .ComponentNotFound(
                message: FfiConverterString.read(from: &buf)
            )

        case 5: return try .MergeError(
                message: FfiConverterString.read(from: &buf)
            )

        case 6: return try .ChildNotFoundForTemplate(
                message: FfiConverterString.read(from: &buf)
            )

        case 7: return try .ChildNotFoundForStatic(
                message: FfiConverterString.read(from: &buf)
            )

        case 8: return try .CousinNotFound(
                message: FfiConverterString.read(from: &buf)
            )

        case 9: return try .SerdeError(
                message: FfiConverterString.read(from: &buf)
            )

        case 10: return try .ParseError(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RenderError, into buf: inout [UInt8]) {
        switch value {
        case .NoComponents(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        case .NoTemplates(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(2))
        case .TemplateNotFound(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(3))
        case .ComponentNotFound(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(4))
        case .MergeError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(5))
        case .ChildNotFoundForTemplate(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(6))
        case .ChildNotFoundForStatic(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(7))
        case .CousinNotFound(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(8))
        case .SerdeError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(9))
        case .ParseError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(10))
        }
    }
}

extension RenderError: Equatable, Hashable {}

extension RenderError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

public enum StreamConversionError {
    case NoStreamId(message: String)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeStreamConversionError: FfiConverterRustBuffer {
    typealias SwiftType = StreamConversionError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StreamConversionError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .NoStreamId(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: StreamConversionError, into buf: inout [UInt8]) {
        switch value {
        case .NoStreamId(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        }
    }
}

extension StreamConversionError: Equatable, Hashable {}

extension StreamConversionError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

public enum UploadError {
    case FileTooLarge
    case FileNotAccepted
    case Other(error: String
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeUploadError: FfiConverterRustBuffer {
    typealias SwiftType = UploadError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UploadError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .FileTooLarge
        case 2: return .FileNotAccepted
        case 3: return try .Other(
                error: FfiConverterString.read(from: &buf)
            )
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: UploadError, into buf: inout [UInt8]) {
        switch value {
        case .FileTooLarge:
            writeInt(&buf, Int32(1))

        case .FileNotAccepted:
            writeInt(&buf, Int32(2))

        case let .Other(error):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(error, into: &buf)
        }
    }
}

extension UploadError: Equatable, Hashable {}

extension UploadError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

/**
 * Implements the change handling logic for inbound virtual dom
 * changes. Your logic for handling document patches should go here.
 */
public protocol DocumentChangeHandler: AnyObject {
    /**
     * This callback should implement your dom manipulation logic
     * after receiving patches from LVN.
     */
    func handle(_ changeType: ChangeType, _ nodeRef: NodeRef, _ nodeData: NodeData, _ parent: NodeRef?)
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceDocumentChangeHandler {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceDocumentChangeHandler = .init(
        handle: { (
            uniffiHandle: UInt64,
            changeType: RustBuffer,
            nodeRef: UnsafeMutableRawPointer,
            nodeData: RustBuffer,
            parent: RustBuffer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceDocumentChangeHandler.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.handle(
                    FfiConverterTypeChangeType.lift(changeType),
                    FfiConverterTypeNodeRef.lift(nodeRef),
                    FfiConverterTypeNodeData.lift(nodeData),
                    FfiConverterOptionTypeNodeRef.lift(parent)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterCallbackInterfaceDocumentChangeHandler.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface DocumentChangeHandler: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitDocumentChangeHandler() {
    uniffi_liveview_native_core_fn_init_callback_vtable_documentchangehandler(&UniffiCallbackInterfaceDocumentChangeHandler.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private enum FfiConverterCallbackInterfaceDocumentChangeHandler {
    fileprivate static var handleMap = UniffiHandleMap<DocumentChangeHandler>()
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceDocumentChangeHandler: FfiConverter {
    typealias SwiftType = DocumentChangeHandler
    typealias FfiType = UInt64

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeNodeRef: FfiConverterRustBuffer {
    typealias SwiftType = NodeRef?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeNodeRef.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeNodeRef.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeAttribute: FfiConverterRustBuffer {
    typealias SwiftType = Attribute?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAttribute.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAttribute.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeConnectOpts: FfiConverterRustBuffer {
    typealias SwiftType = ConnectOpts?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeConnectOpts.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeConnectOpts.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionDictionaryStringString: FfiConverterRustBuffer {
    typealias SwiftType = [String: String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryStringString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryStringString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionDictionaryStringTypeJSON: FfiConverterRustBuffer {
    typealias SwiftType = [String: Json]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryStringTypeJSON.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryStringTypeJSON.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeNode: FfiConverterRustBuffer {
    typealias SwiftType = [Node]

    public static func write(_ value: [Node], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeNode.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Node] {
        let len: Int32 = try readInt(&buf)
        var seq = [Node]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeNode.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeNodeRef: FfiConverterRustBuffer {
    typealias SwiftType = [NodeRef]

    public static func write(_ value: [NodeRef], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeNodeRef.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [NodeRef] {
        let len: Int32 = try readInt(&buf)
        var seq = [NodeRef]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeNodeRef.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeAttribute: FfiConverterRustBuffer {
    typealias SwiftType = [Attribute]

    public static func write(_ value: [Attribute], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAttribute.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Attribute] {
        let len: Int32 = try readInt(&buf)
        var seq = [Attribute]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeAttribute.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterDictionaryStringString: FfiConverterRustBuffer {
    public static func write(_ value: [String: String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: String] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: String]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterDictionaryStringTypeJSON: FfiConverterRustBuffer {
    public static func write(_ value: [String: Json], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeJSON.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: Json] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: Json]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeJSON.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

private let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

private func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> Void,
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> Void,
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
private func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_liveview_native_core_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_liveview_native_core_checksum_method_document_children() != 59121 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_document_get() != 61396 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_document_get_attributes() != 42016 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_document_get_node() != 62413 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_document_get_parent() != 49974 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_document_merge_fragment_json() != 40898 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_document_next_upload_id() != 52006 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_document_render() != 31975 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_document_root() != 55719 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_document_set_event_handler() != 18356 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_livechannel_channel() != 14836 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_livechannel_construct_upload() != 11769 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_livechannel_document() != 32827 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_livechannel_join_payload() != 65526 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_livechannel_merge_diffs() != 5265 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_livechannel_set_event_handler() != 41602 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_livechannel_upload_file() != 60235 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_livesocket_dead_render() != 35094 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_livesocket_has_live_reload() != 3400 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_livesocket_join_livereload_channel() != 34308 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_livesocket_join_liveview_channel() != 15340 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_livesocket_socket() != 14037 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_livesocket_style_urls() != 29200 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_node_attributes() != 60381 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_node_data() != 10189 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_node_display() != 36109 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_node_document() != 33196 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_node_get_attribute() != 29873 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_node_get_children() != 25833 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_node_get_depth_first_children() != 59594 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_node_id() != 22538 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_noderef_ref() != 32879 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_constructor_document_empty() != 49805 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_constructor_document_parse() != 495 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_constructor_document_parse_fragment_json() != 46839 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_constructor_livesocket_connect() != 43546 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_constructor_livesocket_new() != 40729 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_constructor_node_new() != 23337 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_liveview_native_core_checksum_method_documentchangehandler_handle() != 26333 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitDocumentChangeHandler()
    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all
