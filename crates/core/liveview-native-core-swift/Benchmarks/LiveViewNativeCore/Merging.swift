// Benchmark boilerplate generated by Benchmark

import Benchmark
import Foundation
import LiveViewNativeCore

let benchmarks = {
    Benchmark("Large Merge") { benchmark in
        for _ in benchmark.scaledIterations {
            blackHole(try MultiMergeJson()) // replace this line with your own benchmark
        }
    }
    Benchmark("Large Rendering") { benchmark in
        let doc = try MultiMergeJson()
        for _ in benchmark.scaledIterations {
            blackHole(try MultiMergeRender(doc)) // replace this line with your own benchmark
        }
    }
    Benchmark("Tree Traversal") { benchmark in
        let doc = try Document.parse(html_input)
        for _ in benchmark.scaledIterations {
            blackHole(TreeTraversal(doc)) // replace this line with your own benchmark
        }
    }
    Benchmark("Tree Traversal - Depth First") { benchmark in
        let doc = try Document.parse(html_input)
        for _ in benchmark.scaledIterations {
            blackHole(DepthFirstTreeTraversal(doc)) // replace this line with your own benchmark
        }
    }
    Benchmark("Parse Json") { benchmark in
        for _ in benchmark.scaledIterations {
            blackHole(try ParseJson()) // replace this line with your own benchmark
        }
    }
    Benchmark("Parse HTML") { benchmark in
        for _ in benchmark.scaledIterations {
            blackHole(try ParseHtml()) // replace this line with your own benchmark
        }
    }
    // Add additional benchmarks here
}
let initial_json = """
{
  "0":"0",
  "1":"0",
  "2":"",
  "s":[
    "<Column>\\n  <Button phx-click=\\"inc\\">\\n    <Text>Increment</Text>\\n  </Button>\\n  <Button phx-click=\\"dec\\">\\n    <Text>Decrement</Text>\\n  </Button>\\n  <Text>Static Text </Text>\\n  <Text>Counter 1: ",
    " </Text>\\n  <Text>Counter 2: ",
    " </Text>\\n",
    "\\n</Column>"
    ]
}
"""
let first_increment = """
{
  "0":"1",
  "1":"1",
  "2":{
    "0":{
      "s":[
        "\\n      <Text fontWeight=\\"W600\\" fontSize=\\"24\\">Item ",
        "!!!</Text>\\n",
        "\\n",
        "\\n"
      ],
      "p":{
         "0":[

           "\\n        <Text color=\\" #FFFF0000\\">Number = ",

           " + 3 is even</Text>\\n"
         ],
         "1":[
           "\\n        <Text>Number + 4 = ",
           " is odd</Text>\\n"
           ]
      },
      "d":[["1",{"0":"1","s":0},{"0":"5","s":1}]]
    },
    "1":"101",
    "s":[
      "\\n",
      "\\n    <Text>Number + 100 is ","</Text>\\n"
    ]
  }
}
"""
let second_increment = """
{
  "0":"2",
  "1":"2",
  "2":{
    "0":{
      "p":{
        "0":[
          "\\n        <Text color=\\" #FFFF0000\\">Number = ",
          " + 3 is even</Text>\\n"
        ],
        "1":[
          "\\n        <Text>Number + 4 = ",
          " is odd</Text>\\n"
        ],
        "2":[
          "\\n        <Text color=\\" #FF0000FF\\">Number = ",
          " + 3 is odd</Text>\\n"
        ],
        "3":[
          "\\n        <Text>Number + 4 = ",
          " is even</Text>\\n"
        ]
      },
      "d":[
        ["1",{"0":"1","s":0},{"0":"5","s":1}],
        ["2",{"0":"2","s":2},{"0":"6","s":3}]
      ]
    },
    "1":"102"
  }
}
"""

func ParseJson() throws -> Document {
    return try Document.parseFragmentJson(initial_json)
}
// This is the code for the large integration test from:
// https://github.com/liveview-native/liveview-native-core/blob/4b7d303f98be3325c94575bfb6a7a317e2eee717/crates/core/liveview-native-core-swift/Tests/LiveViewNativeCoreTests/LiveViewNativeCoreTests.swift#L121
func MultiMergeJson() throws -> Document {
    let doc = try Document.parseFragmentJson(initial_json)
    try doc.mergeFragmentJson(first_increment)
    try doc.mergeFragmentJson(second_increment)
    return doc
}


func MultiMergeRender(_ doc: Document) {
    let third_render = doc.toString()
}
func TreeTraversal(_ doc: Document) {
    let root_node = doc[doc.root()]
    for i in root_node.children() {
    }
}
func DepthFirstTreeTraversal(_ doc: Document) {
    let root_node = doc[doc.root()]
    for i in root_node.depthFirstChildren() {
    }
}
let html_input = """
<Column>
	<Button phx-click="inc">
		<Text>
			Increment
		</Text>
	</Button>
	<Button phx-click="dec">
		<Text>
			Decrement
		</Text>
	</Button>
	<Text>
		Static Text
	</Text>
	<Text>
		Counter 1: 2
	</Text>
	<Text>
		Counter 2: 2
	</Text>
	<Text fontWeight="W600" fontSize="24">
		Item 1!!!
	</Text>
	<Text color=" #FFFF0000">
		Number = 1 + 3 is even
	</Text>
	<Text>
		Number + 4 = 5 is odd
	</Text>
	<Text fontWeight="W600" fontSize="24">
		Item 2!!!
	</Text>
	<Text color=" #FF0000FF">
		Number = 2 + 3 is odd
	</Text>
	<Text>
		Number + 4 = 6 is even
	</Text>
	<Text>
		Number + 100 is 102
	</Text>
</Column>
"""
func ParseHtml() throws -> Document {
    return try Document.parse(html_input)
}
