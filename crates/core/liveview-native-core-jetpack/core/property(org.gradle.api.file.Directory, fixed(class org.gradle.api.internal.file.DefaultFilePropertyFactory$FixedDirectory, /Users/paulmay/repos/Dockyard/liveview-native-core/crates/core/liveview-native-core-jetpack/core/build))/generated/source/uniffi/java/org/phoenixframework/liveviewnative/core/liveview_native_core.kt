// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package org.phoenixframework.liveviewnative.core

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Callback
import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.*
import kotlinx.coroutines.CancellableContinuation
import kotlinx.coroutines.suspendCancellableCoroutine
import org.phoenixframework.liveviewnative.channel.Channel
import org.phoenixframework.liveviewnative.channel.FfiConverterTypeChannel
import org.phoenixframework.liveviewnative.channel.FfiConverterTypeJSON
import org.phoenixframework.liveviewnative.channel.FfiConverterTypePayload
import org.phoenixframework.liveviewnative.channel.FfiConverterTypeSocket
import org.phoenixframework.liveviewnative.channel.Json
import org.phoenixframework.liveviewnative.channel.Payload
import org.phoenixframework.liveviewnative.channel.Socket
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import kotlin.coroutines.resume
import org.phoenixframework.liveviewnative.channel.RustBuffer as RustBufferPayload

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

/**
 * @suppress
 */
@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0

    @JvmField var len: Long = 0

    @JvmField var data: Pointer? = null

    class ByValue :
        RustBuffer(),
        Structure.ByValue

    class ByReference :
        RustBuffer(),
        Structure.ByReference

    internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) =
            uniffiRustCall { status ->
                // Note: need to convert the size to a `Long` value to make this work with JVM.
                UniffiLib.INSTANCE.ffi_liveview_native_core_rustbuffer_alloc(size.toLong(), status)
            }.also {
                if (it.data == null) {
                    throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=$size)")
                }
            }

        internal fun create(
            capacity: ULong,
            len: ULong,
            data: Pointer?,
        ): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) =
            uniffiRustCall { status ->
                UniffiLib.INSTANCE.ffi_liveview_native_core_rustbuffer_free(buf, status)
            }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 *
 * @suppress
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
internal open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0

    @JvmField var data: Pointer? = null

    class ByValue :
        ForeignBytes(),
        Structure.ByValue
}

/**
 * The FfiConverter interface handles converter types to and from the FFI
 *
 * All implementing objects should be public to support external types.  When a
 * type is external we need to import it's FfiConverter.
 *
 * @suppress
 */
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(
        value: KotlinType,
        buf: ByteBuffer,
    )

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf =
                rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                    it.order(ByteOrder.BIG_ENDIAN)
                }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
            val item = read(byteBuf)
            if (byteBuf.hasRemaining()) {
                throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
            }
            return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

/**
 * FfiConverter that uses `RustBuffer` as the FfiType
 *
 * @suppress
 */
public interface FfiConverterRustBuffer<KotlinType> : FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)

    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0

    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue :
        UniffiRustCallStatus(),
        Structure.ByValue

    fun isSuccess(): Boolean = code == UNIFFI_CALL_SUCCESS

    fun isError(): Boolean = code == UNIFFI_CALL_ERROR

    fun isPanic(): Boolean = code == UNIFFI_CALL_UNEXPECTED_ERROR

    companion object {
        fun create(
            code: Byte,
            errorBuf: RustBuffer.ByValue,
        ): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(
    message: String,
) : kotlin.Exception(message)

/**
 * Each top-level error class has a companion object that can lift the error from the call status's rust buffer
 *
 * @suppress
 */
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E : kotlin.Exception> uniffiRustCallWithError(
    errorHandler: UniffiRustCallStatusErrorHandler<E>,
    callback: (UniffiRustCallStatus) -> U,
): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun <E : kotlin.Exception> uniffiCheckCallStatus(
    errorHandler: UniffiRustCallStatusErrorHandler<E>,
    status: UniffiRustCallStatus,
) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

/**
 * UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
 *
 * @suppress
 */
object UniffiNullRustCallStatusErrorHandler : UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U =
    uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)

internal inline fun <T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch (e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun <T, reified E : Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue,
) {
    try {
        writeReturn(makeCall())
    } catch (e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}

// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T : Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter =
        java.util.concurrent.atomic
            .AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T = map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T = map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "liveview_native_core"
}

private inline fun <reified Lib : Library> loadIndirect(componentName: String): Lib =
    Native.load<Lib>(findLibraryName(componentName), Lib::class.java)

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(
        `data`: Long,
        `pollResult`: Byte,
    )
}

internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long)
}

internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long)
}

@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ) : UniffiForeignFuture(`handle`, `free`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU8(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU8.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI8(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI8.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU16(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU16.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI16(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI16.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU32(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU32.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI32(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI32.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU64(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU64.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI64(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI64.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructF32(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructF32.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructF64(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructF64.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructPointer(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructPointer.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructRustBuffer(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,
    )
}

@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructVoid(`callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructVoid.UniffiByValue,
    )
}

internal interface UniffiCallbackInterfaceDocumentChangeHandlerMethod0 : com.sun.jna.Callback {
    fun callback(
        `uniffiHandle`: Long,
        `changeType`: RustBuffer.ByValue,
        `nodeRef`: Pointer,
        `nodeData`: RustBuffer.ByValue,
        `parent`: RustBuffer.ByValue,
        `uniffiOutReturn`: Pointer,
        uniffiCallStatus: UniffiRustCallStatus,
    )
}

@Structure.FieldOrder("handle", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceDocumentChangeHandler(
    @JvmField internal var `handle`: UniffiCallbackInterfaceDocumentChangeHandlerMethod0? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: UniffiCallbackInterfaceDocumentChangeHandlerMethod0? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ) : UniffiVTableCallbackInterfaceDocumentChangeHandler(`handle`, `uniffiFree`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceDocumentChangeHandler) {
        `handle` = other.`handle`
        `uniffiFree` = other.`uniffiFree`
    }
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "liveview_native_core")
                .also { lib: UniffiLib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                    uniffiCallbackInterfaceDocumentChangeHandler.register(lib)
                }
        }

        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    fun uniffi_liveview_native_core_fn_clone_document(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_free_document(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_liveview_native_core_fn_constructor_document_empty(uniffi_out_err: UniffiRustCallStatus): Pointer

    fun uniffi_liveview_native_core_fn_constructor_document_parse(
        `input`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_constructor_document_parse_fragment_json(
        `input`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_method_document_children(
        `ptr`: Pointer,
        `nodeRef`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_liveview_native_core_fn_method_document_get(
        `ptr`: Pointer,
        `nodeRef`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_liveview_native_core_fn_method_document_get_attributes(
        `ptr`: Pointer,
        `nodeRef`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_liveview_native_core_fn_method_document_get_node(
        `ptr`: Pointer,
        `nodeRef`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_method_document_get_parent(
        `ptr`: Pointer,
        `nodeRef`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_liveview_native_core_fn_method_document_merge_fragment_json(
        `ptr`: Pointer,
        `json`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_liveview_native_core_fn_method_document_next_upload_id(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Long

    fun uniffi_liveview_native_core_fn_method_document_render(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_liveview_native_core_fn_method_document_root(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_method_document_set_event_handler(
        `ptr`: Pointer,
        `handler`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_liveview_native_core_fn_clone_livechannel(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_free_livechannel(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_liveview_native_core_fn_method_livechannel_channel(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_method_livechannel_document(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_method_livechannel_get_phx_upload_id(
        `ptr`: Pointer,
        `phxTargetName`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_liveview_native_core_fn_method_livechannel_join_payload(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBufferPayload.ByValue

    fun uniffi_liveview_native_core_fn_method_livechannel_merge_diffs(`ptr`: Pointer): Long

    fun uniffi_liveview_native_core_fn_method_livechannel_set_event_handler(
        `ptr`: Pointer,
        `handler`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_liveview_native_core_fn_method_livechannel_upload_file(
        `ptr`: Pointer,
        `file`: Pointer,
    ): Long

    fun uniffi_liveview_native_core_fn_clone_livefile(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_free_livefile(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_liveview_native_core_fn_constructor_livefile_new(
        `contents`: RustBuffer.ByValue,
        `mimeType`: RustBuffer.ByValue,
        `name`: RustBuffer.ByValue,
        `relativePath`: RustBuffer.ByValue,
        `phxUploadId`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_clone_livesocket(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_free_livesocket(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_liveview_native_core_fn_constructor_livesocket_connect(
        `url`: RustBuffer.ByValue,
        `format`: RustBuffer.ByValue,
        `options`: RustBuffer.ByValue,
    ): Long

    fun uniffi_liveview_native_core_fn_constructor_livesocket_new(
        `url`: RustBuffer.ByValue,
        `format`: RustBuffer.ByValue,
        `options`: RustBuffer.ByValue,
    ): Long

    fun uniffi_liveview_native_core_fn_method_livesocket_dead_render(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_method_livesocket_has_live_reload(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun uniffi_liveview_native_core_fn_method_livesocket_join_livereload_channel(`ptr`: Pointer): Long

    fun uniffi_liveview_native_core_fn_method_livesocket_join_liveview_channel(
        `ptr`: Pointer,
        `joinParams`: RustBuffer.ByValue,
        `redirect`: RustBuffer.ByValue,
    ): Long

    fun uniffi_liveview_native_core_fn_method_livesocket_socket(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_method_livesocket_style_urls(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_liveview_native_core_fn_clone_node(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_free_node(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_liveview_native_core_fn_constructor_node_new(
        `document`: Pointer,
        `id`: Pointer,
        `data`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_method_node_attributes(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_liveview_native_core_fn_method_node_data(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_liveview_native_core_fn_method_node_display(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_liveview_native_core_fn_method_node_document(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_method_node_get_attribute(
        `ptr`: Pointer,
        `name`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_liveview_native_core_fn_method_node_get_children(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_liveview_native_core_fn_method_node_get_depth_first_children(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_liveview_native_core_fn_method_node_id(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_clone_noderef(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_liveview_native_core_fn_free_noderef(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_liveview_native_core_fn_method_noderef_ref(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Int

    fun uniffi_liveview_native_core_fn_init_callback_vtable_documentchangehandler(
        `vtable`: UniffiVTableCallbackInterfaceDocumentChangeHandler,
    ): Unit

    fun ffi_liveview_native_core_rustbuffer_alloc(
        `size`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_liveview_native_core_rustbuffer_from_bytes(
        `bytes`: ForeignBytes.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_liveview_native_core_rustbuffer_free(
        `buf`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun ffi_liveview_native_core_rustbuffer_reserve(
        `buf`: RustBuffer.ByValue,
        `additional`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_liveview_native_core_rust_future_poll_u8(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_liveview_native_core_rust_future_cancel_u8(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_free_u8(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_complete_u8(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun ffi_liveview_native_core_rust_future_poll_i8(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_liveview_native_core_rust_future_cancel_i8(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_free_i8(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_complete_i8(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun ffi_liveview_native_core_rust_future_poll_u16(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_liveview_native_core_rust_future_cancel_u16(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_free_u16(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_complete_u16(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Short

    fun ffi_liveview_native_core_rust_future_poll_i16(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_liveview_native_core_rust_future_cancel_i16(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_free_i16(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_complete_i16(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Short

    fun ffi_liveview_native_core_rust_future_poll_u32(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_liveview_native_core_rust_future_cancel_u32(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_free_u32(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_complete_u32(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Int

    fun ffi_liveview_native_core_rust_future_poll_i32(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_liveview_native_core_rust_future_cancel_i32(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_free_i32(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_complete_i32(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Int

    fun ffi_liveview_native_core_rust_future_poll_u64(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_liveview_native_core_rust_future_cancel_u64(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_free_u64(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_complete_u64(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Long

    fun ffi_liveview_native_core_rust_future_poll_i64(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_liveview_native_core_rust_future_cancel_i64(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_free_i64(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_complete_i64(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Long

    fun ffi_liveview_native_core_rust_future_poll_f32(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_liveview_native_core_rust_future_cancel_f32(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_free_f32(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_complete_f32(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Float

    fun ffi_liveview_native_core_rust_future_poll_f64(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_liveview_native_core_rust_future_cancel_f64(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_free_f64(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_complete_f64(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Double

    fun ffi_liveview_native_core_rust_future_poll_pointer(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_liveview_native_core_rust_future_cancel_pointer(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_free_pointer(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_complete_pointer(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun ffi_liveview_native_core_rust_future_poll_rust_buffer(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_liveview_native_core_rust_future_cancel_rust_buffer(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_free_rust_buffer(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_complete_rust_buffer(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_liveview_native_core_rust_future_poll_void(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_liveview_native_core_rust_future_cancel_void(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_free_void(`handle`: Long): Unit

    fun ffi_liveview_native_core_rust_future_complete_void(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_liveview_native_core_checksum_method_document_children(): Short

    fun uniffi_liveview_native_core_checksum_method_document_get(): Short

    fun uniffi_liveview_native_core_checksum_method_document_get_attributes(): Short

    fun uniffi_liveview_native_core_checksum_method_document_get_node(): Short

    fun uniffi_liveview_native_core_checksum_method_document_get_parent(): Short

    fun uniffi_liveview_native_core_checksum_method_document_merge_fragment_json(): Short

    fun uniffi_liveview_native_core_checksum_method_document_next_upload_id(): Short

    fun uniffi_liveview_native_core_checksum_method_document_render(): Short

    fun uniffi_liveview_native_core_checksum_method_document_root(): Short

    fun uniffi_liveview_native_core_checksum_method_document_set_event_handler(): Short

    fun uniffi_liveview_native_core_checksum_method_livechannel_channel(): Short

    fun uniffi_liveview_native_core_checksum_method_livechannel_document(): Short

    fun uniffi_liveview_native_core_checksum_method_livechannel_get_phx_upload_id(): Short

    fun uniffi_liveview_native_core_checksum_method_livechannel_join_payload(): Short

    fun uniffi_liveview_native_core_checksum_method_livechannel_merge_diffs(): Short

    fun uniffi_liveview_native_core_checksum_method_livechannel_set_event_handler(): Short

    fun uniffi_liveview_native_core_checksum_method_livechannel_upload_file(): Short

    fun uniffi_liveview_native_core_checksum_method_livesocket_dead_render(): Short

    fun uniffi_liveview_native_core_checksum_method_livesocket_has_live_reload(): Short

    fun uniffi_liveview_native_core_checksum_method_livesocket_join_livereload_channel(): Short

    fun uniffi_liveview_native_core_checksum_method_livesocket_join_liveview_channel(): Short

    fun uniffi_liveview_native_core_checksum_method_livesocket_socket(): Short

    fun uniffi_liveview_native_core_checksum_method_livesocket_style_urls(): Short

    fun uniffi_liveview_native_core_checksum_method_node_attributes(): Short

    fun uniffi_liveview_native_core_checksum_method_node_data(): Short

    fun uniffi_liveview_native_core_checksum_method_node_display(): Short

    fun uniffi_liveview_native_core_checksum_method_node_document(): Short

    fun uniffi_liveview_native_core_checksum_method_node_get_attribute(): Short

    fun uniffi_liveview_native_core_checksum_method_node_get_children(): Short

    fun uniffi_liveview_native_core_checksum_method_node_get_depth_first_children(): Short

    fun uniffi_liveview_native_core_checksum_method_node_id(): Short

    fun uniffi_liveview_native_core_checksum_method_noderef_ref(): Short

    fun uniffi_liveview_native_core_checksum_constructor_document_empty(): Short

    fun uniffi_liveview_native_core_checksum_constructor_document_parse(): Short

    fun uniffi_liveview_native_core_checksum_constructor_document_parse_fragment_json(): Short

    fun uniffi_liveview_native_core_checksum_constructor_livefile_new(): Short

    fun uniffi_liveview_native_core_checksum_constructor_livesocket_connect(): Short

    fun uniffi_liveview_native_core_checksum_constructor_livesocket_new(): Short

    fun uniffi_liveview_native_core_checksum_constructor_node_new(): Short

    fun uniffi_liveview_native_core_checksum_method_documentchangehandler_handle(): Short

    fun ffi_liveview_native_core_uniffi_contract_version(): Int
}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_liveview_native_core_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_liveview_native_core_checksum_method_document_children() != 59121.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_document_get() != 61396.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_document_get_attributes() != 42016.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_document_get_node() != 62413.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_document_get_parent() != 49974.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_document_merge_fragment_json() != 40898.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_document_next_upload_id() != 52006.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_document_render() != 31975.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_document_root() != 55719.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_document_set_event_handler() != 18356.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_livechannel_channel() != 14836.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_livechannel_document() != 32827.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_livechannel_get_phx_upload_id() != 54169.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_livechannel_join_payload() != 65526.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_livechannel_merge_diffs() != 5265.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_livechannel_set_event_handler() != 41602.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_livechannel_upload_file() != 60235.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_livesocket_dead_render() != 35094.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_livesocket_has_live_reload() != 3400.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_livesocket_join_livereload_channel() != 34308.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_livesocket_join_liveview_channel() != 15340.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_livesocket_socket() != 14037.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_livesocket_style_urls() != 29200.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_node_attributes() != 60381.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_node_data() != 10189.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_node_display() != 36109.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_node_document() != 33196.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_node_get_attribute() != 29873.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_node_get_children() != 25833.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_node_get_depth_first_children() != 59594.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_node_id() != 22538.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_noderef_ref() != 32879.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_constructor_document_empty() != 49805.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_constructor_document_parse() != 495.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_constructor_document_parse_fragment_json() != 46839.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_constructor_livefile_new() != 43235.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_constructor_livesocket_connect() != 43546.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_constructor_livesocket_new() != 40729.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_constructor_node_new() != 23337.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_liveview_native_core_checksum_method_documentchangehandler_handle() != 26333.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support
// Async return type handlers

internal const val UNIFFI_RUST_FUTURE_POLL_READY = 0.toByte()
internal const val UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1.toByte()

internal val uniffiContinuationHandleMap = UniffiHandleMap<CancellableContinuation<Byte>>()

// FFI type for Rust future continuations
internal object uniffiRustFutureContinuationCallbackImpl : UniffiRustFutureContinuationCallback {
    override fun callback(
        data: Long,
        pollResult: Byte,
    ) {
        uniffiContinuationHandleMap.remove(data).resume(pollResult)
    }
}

internal suspend fun <T, F, E : kotlin.Exception> uniffiRustCallAsync(
    rustFuture: Long,
    pollFunc: (Long, UniffiRustFutureContinuationCallback, Long) -> Unit,
    completeFunc: (Long, UniffiRustCallStatus) -> F,
    freeFunc: (Long) -> Unit,
    liftFunc: (F) -> T,
    errorHandler: UniffiRustCallStatusErrorHandler<E>,
): T {
    try {
        do {
            val pollResult =
                suspendCancellableCoroutine<Byte> { continuation ->
                    pollFunc(
                        rustFuture,
                        uniffiRustFutureContinuationCallbackImpl,
                        uniffiContinuationHandleMap.insert(continuation),
                    )
                }
        } while (pollResult != UNIFFI_RUST_FUTURE_POLL_READY)

        return liftFunc(
            uniffiRustCallWithError(errorHandler, { status -> completeFunc(rustFuture, status) }),
        )
    } finally {
        freeFunc(rustFuture)
    }
}

// Public interface members begin here.

// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()

    companion object {
        fun destroy(vararg args: Any?) {
            args
                .filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

/**
 * @suppress
 */
inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/**
 * Used to instantiate an interface without an actual pointer, for fakes in tests, mostly.
 *
 * @suppress
 * */
object NoPointer

/**
 * @suppress
 */
public object FfiConverterInt : FfiConverter<Int, Int> {
    override fun lift(value: Int): Int = value

    override fun read(buf: ByteBuffer): Int = buf.getInt()

    override fun lower(value: Int): Int = value

    override fun allocationSize(value: Int) = 4UL

    override fun write(
        value: Int,
        buf: ByteBuffer,
    ) {
        buf.putInt(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterULong : FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong = value.toULong()

    override fun read(buf: ByteBuffer): ULong = lift(buf.getLong())

    override fun lower(value: ULong): Long = value.toLong()

    override fun allocationSize(value: ULong) = 8UL

    override fun write(
        value: ULong,
        buf: ByteBuffer,
    ) {
        buf.putLong(value.toLong())
    }
}

/**
 * @suppress
 */
public object FfiConverterBoolean : FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean = value.toInt() != 0

    override fun read(buf: ByteBuffer): Boolean = lift(buf.get())

    override fun lower(value: Boolean): Byte = if (value) 1.toByte() else 0.toByte()

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(
        value: Boolean,
        buf: ByteBuffer,
    ) {
        buf.put(lower(value))
    }
}

/**
 * @suppress
 */
public object FfiConverterString : FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(
        value: String,
        buf: ByteBuffer,
    ) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

/**
 * @suppress
 */
public object FfiConverterByteArray : FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }

    override fun allocationSize(value: ByteArray): ULong = 4UL + value.size.toULong()

    override fun write(
        value: ByteArray,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        buf.put(value)
    }
}

// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//

/**
 * The cleaner interface for Object finalization code to run.
 * This is the entry point to any implementation that we're using.
 *
 * The cleaner registers objects and returns cleanables, so now we are
 * defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
 * different implmentations available at compile time.
 *
 * @suppress
 */
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(
        value: Any,
        cleanUpTask: Runnable,
    ): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner =
        com.sun.jna.internal.Cleaner
            .getCleaner()

    override fun register(
        value: Any,
        cleanUpTask: Runnable,
    ): UniffiCleaner.Cleanable = UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner =
        java.lang.ref.Cleaner
            .create()

    override fun register(
        value: Any,
        cleanUpTask: Runnable,
    ): UniffiCleaner.Cleanable = JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

public interface DocumentInterface {
    fun `children`(`nodeRef`: NodeRef): List<NodeRef>

    fun `get`(`nodeRef`: NodeRef): NodeData

    fun `getAttributes`(`nodeRef`: NodeRef): List<Attribute>

    fun `getNode`(`nodeRef`: NodeRef): Node

    fun `getParent`(`nodeRef`: NodeRef): NodeRef?

    fun `mergeFragmentJson`(`json`: kotlin.String)

    fun `nextUploadId`(): kotlin.ULong

    fun `render`(): kotlin.String

    fun `root`(): NodeRef

    fun `setEventHandler`(`handler`: DocumentChangeHandler)

    companion object
}

open class Document :
    Disposable,
    AutoCloseable,
    DocumentInterface {
    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(
        private val pointer: Pointer?,
    ) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_free_document(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer =
        uniffiRustCall { status ->
            UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_clone_document(pointer!!, status)
        }

    override fun `children`(`nodeRef`: NodeRef): List<NodeRef> =
        FfiConverterSequenceTypeNodeRef.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_document_children(
                        it,
                        FfiConverterTypeNodeRef.lower(`nodeRef`),
                        _status,
                    )
                }
            },
        )

    override fun `get`(`nodeRef`: NodeRef): NodeData =
        FfiConverterTypeNodeData.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_document_get(
                        it,
                        FfiConverterTypeNodeRef.lower(`nodeRef`),
                        _status,
                    )
                }
            },
        )

    override fun `getAttributes`(`nodeRef`: NodeRef): List<Attribute> =
        FfiConverterSequenceTypeAttribute.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_document_get_attributes(
                        it,
                        FfiConverterTypeNodeRef.lower(`nodeRef`),
                        _status,
                    )
                }
            },
        )

    override fun `getNode`(`nodeRef`: NodeRef): Node =
        FfiConverterTypeNode.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_document_get_node(
                        it,
                        FfiConverterTypeNodeRef.lower(`nodeRef`),
                        _status,
                    )
                }
            },
        )

    override fun `getParent`(`nodeRef`: NodeRef): NodeRef? =
        FfiConverterOptionalTypeNodeRef.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_document_get_parent(
                        it,
                        FfiConverterTypeNodeRef.lower(`nodeRef`),
                        _status,
                    )
                }
            },
        )

    @Throws(RenderException::class)
    override fun `mergeFragmentJson`(`json`: kotlin.String) =
        callWithPointer {
            uniffiRustCallWithError(RenderException) { _status ->
                UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_document_merge_fragment_json(
                    it,
                    FfiConverterString.lower(`json`),
                    _status,
                )
            }
        }

    override fun `nextUploadId`(): kotlin.ULong =
        FfiConverterULong.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_document_next_upload_id(
                        it,
                        _status,
                    )
                }
            },
        )

    override fun `render`(): kotlin.String =
        FfiConverterString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_document_render(
                        it,
                        _status,
                    )
                }
            },
        )

    override fun `root`(): NodeRef =
        FfiConverterTypeNodeRef.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_document_root(
                        it,
                        _status,
                    )
                }
            },
        )

    override fun `setEventHandler`(`handler`: DocumentChangeHandler) =
        callWithPointer {
            uniffiRustCall { _status ->
                UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_document_set_event_handler(
                    it,
                    FfiConverterTypeDocumentChangeHandler.lower(`handler`),
                    _status,
                )
            }
        }

    companion object {
        fun `empty`(): Document =
            FfiConverterTypeDocument.lift(
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_constructor_document_empty(
                        _status,
                    )
                },
            )

        @Throws(ParseException::class)
        fun `parse`(`input`: kotlin.String): Document =
            FfiConverterTypeDocument.lift(
                uniffiRustCallWithError(ParseException) { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_constructor_document_parse(
                        FfiConverterString.lower(`input`),
                        _status,
                    )
                },
            )

        @Throws(RenderException::class)
        fun `parseFragmentJson`(`input`: kotlin.String): Document =
            FfiConverterTypeDocument.lift(
                uniffiRustCallWithError(RenderException) { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_constructor_document_parse_fragment_json(
                        FfiConverterString.lower(`input`),
                        _status,
                    )
                },
            )
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeDocument : FfiConverter<Document, Pointer> {
    override fun lower(value: Document): Pointer = value.uniffiClonePointer()

    override fun lift(value: Pointer): Document = Document(value)

    override fun read(buf: ByteBuffer): Document {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Document) = 8UL

    override fun write(
        value: Document,
        buf: ByteBuffer,
    ) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//

public interface LiveChannelInterface {
    fun `channel`(): Channel

    fun `document`(): Document

    fun `getPhxUploadId`(`phxTargetName`: kotlin.String): kotlin.String

    fun `joinPayload`(): Payload

    suspend fun `mergeDiffs`()

    fun `setEventHandler`(`handler`: DocumentChangeHandler)

    suspend fun `uploadFile`(`file`: LiveFile)

    companion object
}

open class LiveChannel :
    Disposable,
    AutoCloseable,
    LiveChannelInterface {
    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(
        private val pointer: Pointer?,
    ) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_free_livechannel(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer =
        uniffiRustCall { status ->
            UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_clone_livechannel(pointer!!, status)
        }

    override fun `channel`(): Channel =
        FfiConverterTypeChannel.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_livechannel_channel(
                        it,
                        _status,
                    )
                }
            },
        )

    override fun `document`(): Document =
        FfiConverterTypeDocument.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_livechannel_document(
                        it,
                        _status,
                    )
                }
            },
        )

    @Throws(LiveSocketException::class)
    override fun `getPhxUploadId`(`phxTargetName`: kotlin.String): kotlin.String =
        FfiConverterString.lift(
            callWithPointer {
                uniffiRustCallWithError(LiveSocketException) { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_livechannel_get_phx_upload_id(
                        it,
                        FfiConverterString.lower(`phxTargetName`),
                        _status,
                    )
                }
            },
        )

    override fun `joinPayload`(): Payload =
        FfiConverterTypePayload.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_livechannel_join_payload(
                        it,
                        _status,
                    )
                }
            },
        )

    @Throws(LiveSocketException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `mergeDiffs`() =
        uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_livechannel_merge_diffs(
                    thisPtr,
                )
            },
            {
                    future,
                    callback,
                    continuation,
                ->
                UniffiLib.INSTANCE.ffi_liveview_native_core_rust_future_poll_void(future, callback, continuation)
            },
            { future, continuation -> UniffiLib.INSTANCE.ffi_liveview_native_core_rust_future_complete_void(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_liveview_native_core_rust_future_free_void(future) },
            // lift function
            { Unit },
            // Error FFI converter
            LiveSocketException.ErrorHandler,
        )

    override fun `setEventHandler`(`handler`: DocumentChangeHandler) =
        callWithPointer {
            uniffiRustCall { _status ->
                UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_livechannel_set_event_handler(
                    it,
                    FfiConverterTypeDocumentChangeHandler.lower(`handler`),
                    _status,
                )
            }
        }

    @Throws(LiveSocketException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `uploadFile`(`file`: LiveFile) =
        uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_livechannel_upload_file(
                    thisPtr,
                    FfiConverterTypeLiveFile.lower(`file`),
                )
            },
            {
                    future,
                    callback,
                    continuation,
                ->
                UniffiLib.INSTANCE.ffi_liveview_native_core_rust_future_poll_void(future, callback, continuation)
            },
            { future, continuation -> UniffiLib.INSTANCE.ffi_liveview_native_core_rust_future_complete_void(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_liveview_native_core_rust_future_free_void(future) },
            // lift function
            { Unit },
            // Error FFI converter
            LiveSocketException.ErrorHandler,
        )

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeLiveChannel : FfiConverter<LiveChannel, Pointer> {
    override fun lower(value: LiveChannel): Pointer = value.uniffiClonePointer()

    override fun lift(value: Pointer): LiveChannel = LiveChannel(value)

    override fun read(buf: ByteBuffer): LiveChannel {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: LiveChannel) = 8UL

    override fun write(
        value: LiveChannel,
        buf: ByteBuffer,
    ) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//

public interface LiveFileInterface {
    companion object
}

open class LiveFile :
    Disposable,
    AutoCloseable,
    LiveFileInterface {
    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * constructs a new `LiveFile` representing a file ready for preflight and upload.
     *
     * * `contents` binary contents of the file
     * * `mime_type` Compliant mime type string of the data `image/png`, `tiff` etc.
     * * `name` Name of the field in the input, technically, the same as the `allow_upload` atom
     * * `relative_path` name of the file, as a relative path
     * * `phx_upload_id` upload id acquire by passing name to [LiveChannel::get_phx_upload_id]
     */
    constructor(
        `contents`: kotlin.ByteArray,
        `mimeType`: kotlin.String,
        `name`: kotlin.String,
        `relativePath`: kotlin.String,
        `phxUploadId`: kotlin.String,
    ) :
        this(
            uniffiRustCall { _status ->
                UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_constructor_livefile_new(
                    FfiConverterByteArray.lower(`contents`),
                    FfiConverterString.lower(`mimeType`),
                    FfiConverterString.lower(`name`),
                    FfiConverterString.lower(`relativePath`),
                    FfiConverterString.lower(`phxUploadId`),
                    _status,
                )
            },
        )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(
        private val pointer: Pointer?,
    ) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_free_livefile(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer =
        uniffiRustCall { status ->
            UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_clone_livefile(pointer!!, status)
        }

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeLiveFile : FfiConverter<LiveFile, Pointer> {
    override fun lower(value: LiveFile): Pointer = value.uniffiClonePointer()

    override fun lift(value: Pointer): LiveFile = LiveFile(value)

    override fun read(buf: ByteBuffer): LiveFile {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: LiveFile) = 8UL

    override fun write(
        value: LiveFile,
        buf: ByteBuffer,
    ) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//

public interface LiveSocketInterface {
    fun `deadRender`(): Document

    fun `hasLiveReload`(): kotlin.Boolean

    suspend fun `joinLivereloadChannel`(): LiveChannel

    suspend fun `joinLiveviewChannel`(
        `joinParams`: Map<kotlin.String, Json>?,
        `redirect`: kotlin.String?,
    ): LiveChannel

    fun `socket`(): Socket

    fun `styleUrls`(): List<kotlin.String>

    companion object
}

open class LiveSocket :
    Disposable,
    AutoCloseable,
    LiveSocketInterface {
    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }
    // Note no constructor generated for this object as it is async.

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(
        private val pointer: Pointer?,
    ) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_free_livesocket(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer =
        uniffiRustCall { status ->
            UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_clone_livesocket(pointer!!, status)
        }

    override fun `deadRender`(): Document =
        FfiConverterTypeDocument.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_livesocket_dead_render(
                        it,
                        _status,
                    )
                }
            },
        )

    override fun `hasLiveReload`(): kotlin.Boolean =
        FfiConverterBoolean.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_livesocket_has_live_reload(
                        it,
                        _status,
                    )
                }
            },
        )

    @Throws(LiveSocketException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `joinLivereloadChannel`(): LiveChannel =
        uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_livesocket_join_livereload_channel(
                    thisPtr,
                )
            },
            {
                    future,
                    callback,
                    continuation,
                ->
                UniffiLib.INSTANCE.ffi_liveview_native_core_rust_future_poll_pointer(future, callback, continuation)
            },
            { future, continuation -> UniffiLib.INSTANCE.ffi_liveview_native_core_rust_future_complete_pointer(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_liveview_native_core_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeLiveChannel.lift(it) },
            // Error FFI converter
            LiveSocketException.ErrorHandler,
        )

    @Throws(LiveSocketException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `joinLiveviewChannel`(
        `joinParams`: Map<kotlin.String, Json>?,
        `redirect`: kotlin.String?,
    ): LiveChannel =
        uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_livesocket_join_liveview_channel(
                    thisPtr,
                    FfiConverterOptionalMapStringTypeJSON.lower(`joinParams`),
                    FfiConverterOptionalString.lower(`redirect`),
                )
            },
            {
                    future,
                    callback,
                    continuation,
                ->
                UniffiLib.INSTANCE.ffi_liveview_native_core_rust_future_poll_pointer(future, callback, continuation)
            },
            { future, continuation -> UniffiLib.INSTANCE.ffi_liveview_native_core_rust_future_complete_pointer(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_liveview_native_core_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeLiveChannel.lift(it) },
            // Error FFI converter
            LiveSocketException.ErrorHandler,
        )

    override fun `socket`(): Socket =
        FfiConverterTypeSocket.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_livesocket_socket(
                        it,
                        _status,
                    )
                }
            },
        )

    override fun `styleUrls`(): List<kotlin.String> =
        FfiConverterSequenceString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_livesocket_style_urls(
                        it,
                        _status,
                    )
                }
            },
        )

    companion object {
        @Throws(LiveSocketException::class)
        @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
        suspend fun `connect`(
            `url`: kotlin.String,
            `format`: kotlin.String,
            `options`: ConnectOpts?,
        ): LiveSocket =
            uniffiRustCallAsync(
                UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_constructor_livesocket_connect(
                    FfiConverterString.lower(`url`),
                    FfiConverterString.lower(`format`),
                    FfiConverterOptionalTypeConnectOpts.lower(`options`),
                ),
                {
                        future,
                        callback,
                        continuation,
                    ->
                    UniffiLib.INSTANCE.ffi_liveview_native_core_rust_future_poll_pointer(future, callback, continuation)
                },
                { future, continuation -> UniffiLib.INSTANCE.ffi_liveview_native_core_rust_future_complete_pointer(future, continuation) },
                { future -> UniffiLib.INSTANCE.ffi_liveview_native_core_rust_future_free_pointer(future) },
                // lift function
                { FfiConverterTypeLiveSocket.lift(it) },
                // Error FFI converter
                LiveSocketException.ErrorHandler,
            )
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeLiveSocket : FfiConverter<LiveSocket, Pointer> {
    override fun lower(value: LiveSocket): Pointer = value.uniffiClonePointer()

    override fun lift(value: Pointer): LiveSocket = LiveSocket(value)

    override fun read(buf: ByteBuffer): LiveSocket {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: LiveSocket) = 8UL

    override fun write(
        value: LiveSocket,
        buf: ByteBuffer,
    ) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//

public interface NodeInterface {
    fun `attributes`(): List<Attribute>

    fun `data`(): NodeData

    fun `display`(): kotlin.String

    fun `document`(): Document

    fun `getAttribute`(`name`: AttributeName): Attribute?

    fun `getChildren`(): List<Node>

    fun `getDepthFirstChildren`(): List<Node>

    fun `id`(): NodeRef

    companion object
}

open class Node :
    Disposable,
    AutoCloseable,
    NodeInterface {
    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }
    constructor(`document`: Document, `id`: NodeRef, `data`: NodeData) :
        this(
            uniffiRustCall { _status ->
                UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_constructor_node_new(
                    FfiConverterTypeDocument.lower(`document`),
                    FfiConverterTypeNodeRef.lower(`id`),
                    FfiConverterTypeNodeData.lower(`data`),
                    _status,
                )
            },
        )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(
        private val pointer: Pointer?,
    ) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_free_node(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer =
        uniffiRustCall { status ->
            UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_clone_node(pointer!!, status)
        }

    override fun `attributes`(): List<Attribute> =
        FfiConverterSequenceTypeAttribute.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_node_attributes(
                        it,
                        _status,
                    )
                }
            },
        )

    override fun `data`(): NodeData =
        FfiConverterTypeNodeData.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_node_data(
                        it,
                        _status,
                    )
                }
            },
        )

    override fun `display`(): kotlin.String =
        FfiConverterString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_node_display(
                        it,
                        _status,
                    )
                }
            },
        )

    override fun `document`(): Document =
        FfiConverterTypeDocument.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_node_document(
                        it,
                        _status,
                    )
                }
            },
        )

    override fun `getAttribute`(`name`: AttributeName): Attribute? =
        FfiConverterOptionalTypeAttribute.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_node_get_attribute(
                        it,
                        FfiConverterTypeAttributeName.lower(`name`),
                        _status,
                    )
                }
            },
        )

    override fun `getChildren`(): List<Node> =
        FfiConverterSequenceTypeNode.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_node_get_children(
                        it,
                        _status,
                    )
                }
            },
        )

    override fun `getDepthFirstChildren`(): List<Node> =
        FfiConverterSequenceTypeNode.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_node_get_depth_first_children(
                        it,
                        _status,
                    )
                }
            },
        )

    override fun `id`(): NodeRef =
        FfiConverterTypeNodeRef.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_node_id(
                        it,
                        _status,
                    )
                }
            },
        )

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeNode : FfiConverter<Node, Pointer> {
    override fun lower(value: Node): Pointer = value.uniffiClonePointer()

    override fun lift(value: Pointer): Node = Node(value)

    override fun read(buf: ByteBuffer): Node {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Node) = 8UL

    override fun write(
        value: Node,
        buf: ByteBuffer,
    ) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//

public interface NodeRefInterface {
    fun `ref`(): kotlin.Int

    companion object
}

open class NodeRef :
    Disposable,
    AutoCloseable,
    NodeRefInterface {
    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(
        private val pointer: Pointer?,
    ) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_free_noderef(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer =
        uniffiRustCall { status ->
            UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_clone_noderef(pointer!!, status)
        }

    override fun `ref`(): kotlin.Int =
        FfiConverterInt.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_liveview_native_core_fn_method_noderef_ref(
                        it,
                        _status,
                    )
                }
            },
        )

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeNodeRef : FfiConverter<NodeRef, Pointer> {
    override fun lower(value: NodeRef): Pointer = value.uniffiClonePointer()

    override fun lift(value: Pointer): NodeRef = NodeRef(value)

    override fun read(buf: ByteBuffer): NodeRef {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: NodeRef) = 8UL

    override fun write(
        value: NodeRef,
        buf: ByteBuffer,
    ) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

data class Attribute(
    var `name`: AttributeName,
    var `value`: kotlin.String?,
) {
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAttribute : FfiConverterRustBuffer<Attribute> {
    override fun read(buf: ByteBuffer): Attribute =
        Attribute(
            FfiConverterTypeAttributeName.read(buf),
            FfiConverterOptionalString.read(buf),
        )

    override fun allocationSize(value: Attribute) =
        (
            FfiConverterTypeAttributeName.allocationSize(value.`name`) +
                FfiConverterOptionalString.allocationSize(value.`value`)
        )

    override fun write(
        value: Attribute,
        buf: ByteBuffer,
    ) {
        FfiConverterTypeAttributeName.write(value.`name`, buf)
        FfiConverterOptionalString.write(value.`value`, buf)
    }
}

/**
 * Represents the fully-qualified name of an attribute
 */
data class AttributeName(
    /**
     * This is used by svg attributes, e.g. `xlink-href`
     */
    var `namespace`: kotlin.String?,
    var `name`: kotlin.String,
) {
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAttributeName : FfiConverterRustBuffer<AttributeName> {
    override fun read(buf: ByteBuffer): AttributeName =
        AttributeName(
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
        )

    override fun allocationSize(value: AttributeName) =
        (
            FfiConverterOptionalString.allocationSize(value.`namespace`) +
                FfiConverterString.allocationSize(value.`name`)
        )

    override fun write(
        value: AttributeName,
        buf: ByteBuffer,
    ) {
        FfiConverterOptionalString.write(value.`namespace`, buf)
        FfiConverterString.write(value.`name`, buf)
    }
}

data class ConnectOpts(
    var `headers`: Map<kotlin.String, kotlin.String>? = null,
    var `body`: kotlin.String? = null,
    var `method`: Method? = null,
    var `timeoutMs`: kotlin.ULong = 30000uL,
) {
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeConnectOpts : FfiConverterRustBuffer<ConnectOpts> {
    override fun read(buf: ByteBuffer): ConnectOpts =
        ConnectOpts(
            FfiConverterOptionalMapStringString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalTypeMethod.read(buf),
            FfiConverterULong.read(buf),
        )

    override fun allocationSize(value: ConnectOpts) =
        (
            FfiConverterOptionalMapStringString.allocationSize(value.`headers`) +
                FfiConverterOptionalString.allocationSize(value.`body`) +
                FfiConverterOptionalTypeMethod.allocationSize(value.`method`) +
                FfiConverterULong.allocationSize(value.`timeoutMs`)
        )

    override fun write(
        value: ConnectOpts,
        buf: ByteBuffer,
    ) {
        FfiConverterOptionalMapStringString.write(value.`headers`, buf)
        FfiConverterOptionalString.write(value.`body`, buf)
        FfiConverterOptionalTypeMethod.write(value.`method`, buf)
        FfiConverterULong.write(value.`timeoutMs`, buf)
    }
}

/**
 * An `Element` is a typed node in a document, with the ability to carry attributes and contain other nodes.
 */
data class Element(
    var `name`: ElementName,
    var `attributes`: List<Attribute>,
) {
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeElement : FfiConverterRustBuffer<Element> {
    override fun read(buf: ByteBuffer): Element =
        Element(
            FfiConverterTypeElementName.read(buf),
            FfiConverterSequenceTypeAttribute.read(buf),
        )

    override fun allocationSize(value: Element) =
        (
            FfiConverterTypeElementName.allocationSize(value.`name`) +
                FfiConverterSequenceTypeAttribute.allocationSize(value.`attributes`)
        )

    override fun write(
        value: Element,
        buf: ByteBuffer,
    ) {
        FfiConverterTypeElementName.write(value.`name`, buf)
        FfiConverterSequenceTypeAttribute.write(value.`attributes`, buf)
    }
}

/**
 * Represents the fully-qualified name of an element
 */
data class ElementName(
    var `namespace`: kotlin.String?,
    var `name`: kotlin.String,
) {
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeElementName : FfiConverterRustBuffer<ElementName> {
    override fun read(buf: ByteBuffer): ElementName =
        ElementName(
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
        )

    override fun allocationSize(value: ElementName) =
        (
            FfiConverterOptionalString.allocationSize(value.`namespace`) +
                FfiConverterString.allocationSize(value.`name`)
        )

    override fun write(
        value: ElementName,
        buf: ByteBuffer,
    ) {
        FfiConverterOptionalString.write(value.`namespace`, buf)
        FfiConverterString.write(value.`name`, buf)
    }
}

enum class ChangeType {
    CHANGE,
    ADD,
    REMOVE,
    REPLACE,
    ;

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeChangeType : FfiConverterRustBuffer<ChangeType> {
    override fun read(buf: ByteBuffer) =
        try {
            ChangeType.values()[buf.getInt() - 1]
        } catch (e: IndexOutOfBoundsException) {
            throw RuntimeException("invalid enum value, something is very wrong!!", e)
        }

    override fun allocationSize(value: ChangeType) = 4UL

    override fun write(
        value: ChangeType,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.ordinal + 1)
    }
}

enum class EventType {
    CHANGED,
    ;

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeEventType : FfiConverterRustBuffer<EventType> {
    override fun read(buf: ByteBuffer) =
        try {
            EventType.values()[buf.getInt() - 1]
        } catch (e: IndexOutOfBoundsException) {
            throw RuntimeException("invalid enum value, something is very wrong!!", e)
        }

    override fun allocationSize(value: EventType) = 4UL

    override fun write(
        value: EventType,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.ordinal + 1)
    }
}

sealed class LiveSocketException : kotlin.Exception() {
    class PayloadNotJson : LiveSocketException() {
        override val message
            get() = ""
    }

    class MimeType(
        val `error`: kotlin.String,
    ) : LiveSocketException() {
        override val message
            get() = "error=${ `error` }"
    }

    class InvalidHeader(
        val `error`: kotlin.String,
    ) : LiveSocketException() {
        override val message
            get() = "error=${ `error` }"
    }

    class InvalidMethod(
        val `error`: kotlin.String,
    ) : LiveSocketException() {
        override val message
            get() = "error=${ `error` }"
    }

    class Phoenix(
        val `error`: kotlin.String,
    ) : LiveSocketException() {
        override val message
            get() = "error=${ `error` }"
    }

    class Request(
        val `error`: kotlin.String,
    ) : LiveSocketException() {
        override val message
            get() = "error=${ `error` }"
    }

    class Parse(
        val `error`: ParseException,
    ) : LiveSocketException() {
        override val message
            get() = "error=${ `error` }"
    }

    class JsonDeserialization(
        val `error`: kotlin.String,
    ) : LiveSocketException() {
        override val message
            get() = "error=${ `error` }"
    }

    class CsfrTokenMissing : LiveSocketException() {
        override val message
            get() = ""
    }

    class PhoenixIdMissing : LiveSocketException() {
        override val message
            get() = ""
    }

    class PhoenixSessionMissing : LiveSocketException() {
        override val message
            get() = ""
    }

    class PhoenixStaticMissing : LiveSocketException() {
        override val message
            get() = ""
    }

    class PhoenixMainMissing : LiveSocketException() {
        override val message
            get() = ""
    }

    class NoHostInUrl : LiveSocketException() {
        override val message
            get() = ""
    }

    class NoUploadToken : LiveSocketException() {
        override val message
            get() = ""
    }

    class NoLiveReloadUrl : LiveSocketException() {
        override val message
            get() = ""
    }

    class SchemeNotSupported(
        val `scheme`: kotlin.String,
    ) : LiveSocketException() {
        override val message
            get() = "scheme=${ `scheme` }"
    }

    class Upload(
        val `error`: UploadException,
    ) : LiveSocketException() {
        override val message
            get() = "error=${ `error` }"
    }

    class NoDocumentInJoinPayload : LiveSocketException() {
        override val message
            get() = ""
    }

    class DocumentMerge(
        val `error`: MergeException,
    ) : LiveSocketException() {
        override val message
            get() = "error=${ `error` }"
    }

    class DocumentRender(
        val `error`: RenderException,
    ) : LiveSocketException() {
        override val message
            get() = "error=${ `error` }"
    }

    class NoInputRefInDocument : LiveSocketException() {
        override val message
            get() = ""
    }

    class Serde(
        val `error`: kotlin.String,
    ) : LiveSocketException() {
        override val message
            get() = "error=${ `error` }"
    }

    class Events(
        val `error`: kotlin.String,
    ) : LiveSocketException() {
        override val message
            get() = "error=${ `error` }"
    }

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<LiveSocketException> {
        override fun lift(error_buf: RustBuffer.ByValue): LiveSocketException = FfiConverterTypeLiveSocketError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeLiveSocketError : FfiConverterRustBuffer<LiveSocketException> {
    override fun read(buf: ByteBuffer): LiveSocketException =
        when (buf.getInt()) {
            1 -> LiveSocketException.PayloadNotJson()
            2 ->
                LiveSocketException.MimeType(
                    FfiConverterString.read(buf),
                )
            3 ->
                LiveSocketException.InvalidHeader(
                    FfiConverterString.read(buf),
                )
            4 ->
                LiveSocketException.InvalidMethod(
                    FfiConverterString.read(buf),
                )
            5 ->
                LiveSocketException.Phoenix(
                    FfiConverterString.read(buf),
                )
            6 ->
                LiveSocketException.Request(
                    FfiConverterString.read(buf),
                )
            7 ->
                LiveSocketException.Parse(
                    FfiConverterTypeParseError.read(buf),
                )
            8 ->
                LiveSocketException.JsonDeserialization(
                    FfiConverterString.read(buf),
                )
            9 -> LiveSocketException.CsfrTokenMissing()
            10 -> LiveSocketException.PhoenixIdMissing()
            11 -> LiveSocketException.PhoenixSessionMissing()
            12 -> LiveSocketException.PhoenixStaticMissing()
            13 -> LiveSocketException.PhoenixMainMissing()
            14 -> LiveSocketException.NoHostInUrl()
            15 -> LiveSocketException.NoUploadToken()
            16 -> LiveSocketException.NoLiveReloadUrl()
            17 ->
                LiveSocketException.SchemeNotSupported(
                    FfiConverterString.read(buf),
                )
            18 ->
                LiveSocketException.Upload(
                    FfiConverterTypeUploadError.read(buf),
                )
            19 -> LiveSocketException.NoDocumentInJoinPayload()
            20 ->
                LiveSocketException.DocumentMerge(
                    FfiConverterTypeMergeError.read(buf),
                )
            21 ->
                LiveSocketException.DocumentRender(
                    FfiConverterTypeRenderError.read(buf),
                )
            22 -> LiveSocketException.NoInputRefInDocument()
            23 ->
                LiveSocketException.Serde(
                    FfiConverterString.read(buf),
                )
            24 ->
                LiveSocketException.Events(
                    FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }

    override fun allocationSize(value: LiveSocketException): ULong =
        when (value) {
            is LiveSocketException.PayloadNotJson -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LiveSocketException.MimeType -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL +
                    FfiConverterString.allocationSize(value.`error`)
            )
            is LiveSocketException.InvalidHeader -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL +
                    FfiConverterString.allocationSize(value.`error`)
            )
            is LiveSocketException.InvalidMethod -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL +
                    FfiConverterString.allocationSize(value.`error`)
            )
            is LiveSocketException.Phoenix -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL +
                    FfiConverterString.allocationSize(value.`error`)
            )
            is LiveSocketException.Request -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL +
                    FfiConverterString.allocationSize(value.`error`)
            )
            is LiveSocketException.Parse -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL +
                    FfiConverterTypeParseError.allocationSize(value.`error`)
            )
            is LiveSocketException.JsonDeserialization -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL +
                    FfiConverterString.allocationSize(value.`error`)
            )
            is LiveSocketException.CsfrTokenMissing -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LiveSocketException.PhoenixIdMissing -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LiveSocketException.PhoenixSessionMissing -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LiveSocketException.PhoenixStaticMissing -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LiveSocketException.PhoenixMainMissing -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LiveSocketException.NoHostInUrl -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LiveSocketException.NoUploadToken -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LiveSocketException.NoLiveReloadUrl -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LiveSocketException.SchemeNotSupported -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL +
                    FfiConverterString.allocationSize(value.`scheme`)
            )
            is LiveSocketException.Upload -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL +
                    FfiConverterTypeUploadError.allocationSize(value.`error`)
            )
            is LiveSocketException.NoDocumentInJoinPayload -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LiveSocketException.DocumentMerge -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL +
                    FfiConverterTypeMergeError.allocationSize(value.`error`)
            )
            is LiveSocketException.DocumentRender -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL +
                    FfiConverterTypeRenderError.allocationSize(value.`error`)
            )
            is LiveSocketException.NoInputRefInDocument -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LiveSocketException.Serde -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL +
                    FfiConverterString.allocationSize(value.`error`)
            )
            is LiveSocketException.Events -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL +
                    FfiConverterString.allocationSize(value.`error`)
            )
        }

    override fun write(
        value: LiveSocketException,
        buf: ByteBuffer,
    ) {
        when (value) {
            is LiveSocketException.PayloadNotJson -> {
                buf.putInt(1)
                Unit
            }
            is LiveSocketException.MimeType -> {
                buf.putInt(2)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
            is LiveSocketException.InvalidHeader -> {
                buf.putInt(3)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
            is LiveSocketException.InvalidMethod -> {
                buf.putInt(4)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
            is LiveSocketException.Phoenix -> {
                buf.putInt(5)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
            is LiveSocketException.Request -> {
                buf.putInt(6)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
            is LiveSocketException.Parse -> {
                buf.putInt(7)
                FfiConverterTypeParseError.write(value.`error`, buf)
                Unit
            }
            is LiveSocketException.JsonDeserialization -> {
                buf.putInt(8)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
            is LiveSocketException.CsfrTokenMissing -> {
                buf.putInt(9)
                Unit
            }
            is LiveSocketException.PhoenixIdMissing -> {
                buf.putInt(10)
                Unit
            }
            is LiveSocketException.PhoenixSessionMissing -> {
                buf.putInt(11)
                Unit
            }
            is LiveSocketException.PhoenixStaticMissing -> {
                buf.putInt(12)
                Unit
            }
            is LiveSocketException.PhoenixMainMissing -> {
                buf.putInt(13)
                Unit
            }
            is LiveSocketException.NoHostInUrl -> {
                buf.putInt(14)
                Unit
            }
            is LiveSocketException.NoUploadToken -> {
                buf.putInt(15)
                Unit
            }
            is LiveSocketException.NoLiveReloadUrl -> {
                buf.putInt(16)
                Unit
            }
            is LiveSocketException.SchemeNotSupported -> {
                buf.putInt(17)
                FfiConverterString.write(value.`scheme`, buf)
                Unit
            }
            is LiveSocketException.Upload -> {
                buf.putInt(18)
                FfiConverterTypeUploadError.write(value.`error`, buf)
                Unit
            }
            is LiveSocketException.NoDocumentInJoinPayload -> {
                buf.putInt(19)
                Unit
            }
            is LiveSocketException.DocumentMerge -> {
                buf.putInt(20)
                FfiConverterTypeMergeError.write(value.`error`, buf)
                Unit
            }
            is LiveSocketException.DocumentRender -> {
                buf.putInt(21)
                FfiConverterTypeRenderError.write(value.`error`, buf)
                Unit
            }
            is LiveSocketException.NoInputRefInDocument -> {
                buf.putInt(22)
                Unit
            }
            is LiveSocketException.Serde -> {
                buf.putInt(23)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
            is LiveSocketException.Events -> {
                buf.putInt(24)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

sealed class MergeException : kotlin.Exception() {
    class FragmentTypeMismatch : MergeException() {
        override val message
            get() = ""
    }

    class CreateComponentFromUpdate : MergeException() {
        override val message
            get() = ""
    }

    class CreateChildFromUpdateFragment : MergeException() {
        override val message
            get() = ""
    }

    class AddChildToExisting : MergeException() {
        override val message
            get() = ""
    }

    class StreamIdMismatch : MergeException() {
        override val message
            get() = ""
    }

    class Stream(
        val `error`: StreamConversionException,
    ) : MergeException() {
        override val message
            get() = "error=${ `error` }"
    }

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<MergeException> {
        override fun lift(error_buf: RustBuffer.ByValue): MergeException = FfiConverterTypeMergeError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeMergeError : FfiConverterRustBuffer<MergeException> {
    override fun read(buf: ByteBuffer): MergeException =
        when (buf.getInt()) {
            1 -> MergeException.FragmentTypeMismatch()
            2 -> MergeException.CreateComponentFromUpdate()
            3 -> MergeException.CreateChildFromUpdateFragment()
            4 -> MergeException.AddChildToExisting()
            5 -> MergeException.StreamIdMismatch()
            6 ->
                MergeException.Stream(
                    FfiConverterTypeStreamConversionError.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }

    override fun allocationSize(value: MergeException): ULong =
        when (value) {
            is MergeException.FragmentTypeMismatch -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MergeException.CreateComponentFromUpdate -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MergeException.CreateChildFromUpdateFragment -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MergeException.AddChildToExisting -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MergeException.StreamIdMismatch -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MergeException.Stream -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL +
                    FfiConverterTypeStreamConversionError.allocationSize(value.`error`)
            )
        }

    override fun write(
        value: MergeException,
        buf: ByteBuffer,
    ) {
        when (value) {
            is MergeException.FragmentTypeMismatch -> {
                buf.putInt(1)
                Unit
            }
            is MergeException.CreateComponentFromUpdate -> {
                buf.putInt(2)
                Unit
            }
            is MergeException.CreateChildFromUpdateFragment -> {
                buf.putInt(3)
                Unit
            }
            is MergeException.AddChildToExisting -> {
                buf.putInt(4)
                Unit
            }
            is MergeException.StreamIdMismatch -> {
                buf.putInt(5)
                Unit
            }
            is MergeException.Stream -> {
                buf.putInt(6)
                FfiConverterTypeStreamConversionError.write(value.`error`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

enum class Method(
    val value: kotlin.UByte,
) {
    GET(0u),
    OPTIONS(1u),
    POST(2u),
    PUT(3u),
    DELETE(4u),
    HEAD(5u),
    TRACE(6u),
    CONNECT(7u),
    PATCH(8u),
    ;

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMethod : FfiConverterRustBuffer<Method> {
    override fun read(buf: ByteBuffer) =
        try {
            Method.values()[buf.getInt() - 1]
        } catch (e: IndexOutOfBoundsException) {
            throw RuntimeException("invalid enum value, something is very wrong!!", e)
        }

    override fun allocationSize(value: Method) = 4UL

    override fun write(
        value: Method,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.ordinal + 1)
    }
}

/**
 * This enum represents the valid node types of a `Document` tree
 */
sealed class NodeData {
    /**
     * A marker node that indicates the root of a document
     *
     * A document may only have a single root, and it has no attributes
     */
    object Root : NodeData()

    /**
     * A typed node that can carry attributes and may contain other nodes
     */
    data class NodeElement(
        val `element`: Element,
    ) : NodeData() {
        companion object
    }

    /**
     * A leaf node is an untyped node, typically text, and does not have any attributes or children
     */
    data class Leaf(
        val `value`: kotlin.String,
    ) : NodeData() {
        companion object
    }

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeNodeData : FfiConverterRustBuffer<NodeData> {
    override fun read(buf: ByteBuffer): NodeData =
        when (buf.getInt()) {
            1 -> NodeData.Root
            2 ->
                NodeData.NodeElement(
                    FfiConverterTypeElement.read(buf),
                )
            3 ->
                NodeData.Leaf(
                    FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }

    override fun allocationSize(value: NodeData) =
        when (value) {
            is NodeData.Root -> {
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                (
                    4UL
                )
            }
            is NodeData.NodeElement -> {
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                (
                    4UL +
                        FfiConverterTypeElement.allocationSize(value.`element`)
                )
            }
            is NodeData.Leaf -> {
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                (
                    4UL +
                        FfiConverterString.allocationSize(value.`value`)
                )
            }
        }

    override fun write(
        value: NodeData,
        buf: ByteBuffer,
    ) {
        when (value) {
            is NodeData.Root -> {
                buf.putInt(1)
                Unit
            }
            is NodeData.NodeElement -> {
                buf.putInt(2)
                FfiConverterTypeElement.write(value.`element`, buf)
                Unit
            }
            is NodeData.Leaf -> {
                buf.putInt(3)
                FfiConverterString.write(value.`value`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

/**
 * Represents the possible types of failure that can occur while parsing a `Document`
 */
sealed class ParseException(
    message: String,
) : kotlin.Exception(message) {
    class Reader(
        message: String,
    ) : ParseException(message)

    class Tokenizer(
        message: String,
    ) : ParseException(message)

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<ParseException> {
        override fun lift(error_buf: RustBuffer.ByValue): ParseException = FfiConverterTypeParseError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeParseError : FfiConverterRustBuffer<ParseException> {
    override fun read(buf: ByteBuffer): ParseException =
        when (buf.getInt()) {
            1 -> ParseException.Reader(FfiConverterString.read(buf))
            2 -> ParseException.Tokenizer(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }

    override fun allocationSize(value: ParseException): ULong = 4UL

    override fun write(
        value: ParseException,
        buf: ByteBuffer,
    ) {
        when (value) {
            is ParseException.Reader -> {
                buf.putInt(1)
                Unit
            }
            is ParseException.Tokenizer -> {
                buf.putInt(2)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

sealed class RenderException(
    message: String,
) : kotlin.Exception(message) {
    class NoComponents(
        message: String,
    ) : RenderException(message)

    class NoTemplates(
        message: String,
    ) : RenderException(message)

    class TemplateNotFound(
        message: String,
    ) : RenderException(message)

    class ComponentNotFound(
        message: String,
    ) : RenderException(message)

    class MergeException(
        message: String,
    ) : RenderException(message)

    class ChildNotFoundForTemplate(
        message: String,
    ) : RenderException(message)

    class ChildNotFoundForStatic(
        message: String,
    ) : RenderException(message)

    class CousinNotFound(
        message: String,
    ) : RenderException(message)

    class SerdeException(
        message: String,
    ) : RenderException(message)

    class ParseException(
        message: String,
    ) : RenderException(message)

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<RenderException> {
        override fun lift(error_buf: RustBuffer.ByValue): RenderException = FfiConverterTypeRenderError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeRenderError : FfiConverterRustBuffer<RenderException> {
    override fun read(buf: ByteBuffer): RenderException =
        when (buf.getInt()) {
            1 -> RenderException.NoComponents(FfiConverterString.read(buf))
            2 -> RenderException.NoTemplates(FfiConverterString.read(buf))
            3 -> RenderException.TemplateNotFound(FfiConverterString.read(buf))
            4 -> RenderException.ComponentNotFound(FfiConverterString.read(buf))
            5 -> RenderException.MergeException(FfiConverterString.read(buf))
            6 -> RenderException.ChildNotFoundForTemplate(FfiConverterString.read(buf))
            7 -> RenderException.ChildNotFoundForStatic(FfiConverterString.read(buf))
            8 -> RenderException.CousinNotFound(FfiConverterString.read(buf))
            9 -> RenderException.SerdeException(FfiConverterString.read(buf))
            10 -> RenderException.ParseException(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }

    override fun allocationSize(value: RenderException): ULong = 4UL

    override fun write(
        value: RenderException,
        buf: ByteBuffer,
    ) {
        when (value) {
            is RenderException.NoComponents -> {
                buf.putInt(1)
                Unit
            }
            is RenderException.NoTemplates -> {
                buf.putInt(2)
                Unit
            }
            is RenderException.TemplateNotFound -> {
                buf.putInt(3)
                Unit
            }
            is RenderException.ComponentNotFound -> {
                buf.putInt(4)
                Unit
            }
            is RenderException.MergeException -> {
                buf.putInt(5)
                Unit
            }
            is RenderException.ChildNotFoundForTemplate -> {
                buf.putInt(6)
                Unit
            }
            is RenderException.ChildNotFoundForStatic -> {
                buf.putInt(7)
                Unit
            }
            is RenderException.CousinNotFound -> {
                buf.putInt(8)
                Unit
            }
            is RenderException.SerdeException -> {
                buf.putInt(9)
                Unit
            }
            is RenderException.ParseException -> {
                buf.putInt(10)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

sealed class StreamConversionException(
    message: String,
) : kotlin.Exception(message) {
    class NoStreamId(
        message: String,
    ) : StreamConversionException(message)

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<StreamConversionException> {
        override fun lift(error_buf: RustBuffer.ByValue): StreamConversionException = FfiConverterTypeStreamConversionError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeStreamConversionError : FfiConverterRustBuffer<StreamConversionException> {
    override fun read(buf: ByteBuffer): StreamConversionException =
        when (buf.getInt()) {
            1 -> StreamConversionException.NoStreamId(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }

    override fun allocationSize(value: StreamConversionException): ULong = 4UL

    override fun write(
        value: StreamConversionException,
        buf: ByteBuffer,
    ) {
        when (value) {
            is StreamConversionException.NoStreamId -> {
                buf.putInt(1)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

sealed class UploadException : kotlin.Exception() {
    class FileTooLarge : UploadException() {
        override val message
            get() = ""
    }

    class FileNotAccepted : UploadException() {
        override val message
            get() = ""
    }

    class Other(
        val `error`: kotlin.String,
    ) : UploadException() {
        override val message
            get() = "error=${ `error` }"
    }

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<UploadException> {
        override fun lift(error_buf: RustBuffer.ByValue): UploadException = FfiConverterTypeUploadError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeUploadError : FfiConverterRustBuffer<UploadException> {
    override fun read(buf: ByteBuffer): UploadException =
        when (buf.getInt()) {
            1 -> UploadException.FileTooLarge()
            2 -> UploadException.FileNotAccepted()
            3 ->
                UploadException.Other(
                    FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }

    override fun allocationSize(value: UploadException): ULong =
        when (value) {
            is UploadException.FileTooLarge -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is UploadException.FileNotAccepted -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is UploadException.Other -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL +
                    FfiConverterString.allocationSize(value.`error`)
            )
        }

    override fun write(
        value: UploadException,
        buf: ByteBuffer,
    ) {
        when (value) {
            is UploadException.FileTooLarge -> {
                buf.putInt(1)
                Unit
            }
            is UploadException.FileNotAccepted -> {
                buf.putInt(2)
                Unit
            }
            is UploadException.Other -> {
                buf.putInt(3)
                FfiConverterString.write(value.`error`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

/**
 * Implements the change handling logic for inbound virtual dom
 * changes. Your logic for handling document patches should go here.
 */
public interface DocumentChangeHandler {
    /**
     * This callback should implement your dom manipulation logic
     * after receiving patches from LVN.
     */
    fun `handle`(
        `changeType`: ChangeType,
        `nodeRef`: NodeRef,
        `nodeData`: NodeData,
        `parent`: NodeRef?,
    )

    companion object
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0

// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

/**
 * @suppress
 */
public abstract class FfiConverterCallbackInterface<CallbackInterface : Any> : FfiConverter<CallbackInterface, Long> {
    internal val handleMap = UniffiHandleMap<CallbackInterface>()

    internal fun drop(handle: Long) {
        handleMap.remove(handle)
    }

    override fun lift(value: Long): CallbackInterface = handleMap.get(value)

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) = handleMap.insert(value)

    override fun allocationSize(value: CallbackInterface) = 8UL

    override fun write(
        value: CallbackInterface,
        buf: ByteBuffer,
    ) {
        buf.putLong(lower(value))
    }
}

// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceDocumentChangeHandler {
    internal object `handle` : UniffiCallbackInterfaceDocumentChangeHandlerMethod0 {
        override fun callback(
            `uniffiHandle`: Long,
            `changeType`: RustBuffer.ByValue,
            `nodeRef`: Pointer,
            `nodeData`: RustBuffer.ByValue,
            `parent`: RustBuffer.ByValue,
            `uniffiOutReturn`: Pointer,
            uniffiCallStatus: UniffiRustCallStatus,
        ) {
            val uniffiObj = FfiConverterTypeDocumentChangeHandler.handleMap.get(uniffiHandle)
            val makeCall = {  uniffiObj.`handle`(
                FfiConverterTypeChangeType.lift(`changeType`),
                FfiConverterTypeNodeRef.lift(`nodeRef`),
                FfiConverterTypeNodeData.lift(`nodeData`),
                FfiConverterOptionalTypeNodeRef.lift(`parent`),
            )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree : UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeDocumentChangeHandler.handleMap.remove(handle)
        }
    }

    internal var vtable =
        UniffiVTableCallbackInterfaceDocumentChangeHandler.UniffiByValue(
            `handle`,
            uniffiFree,
        )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_liveview_native_core_fn_init_callback_vtable_documentchangehandler(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeDocumentChangeHandler : FfiConverterCallbackInterface<DocumentChangeHandler>()

/**
 * @suppress
 */
public object FfiConverterOptionalString : FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(
        value: kotlin.String?,
        buf: ByteBuffer,
    ) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}

/**
 * @suppress
 */
public object FfiConverterOptionalTypeNodeRef : FfiConverterRustBuffer<NodeRef?> {
    override fun read(buf: ByteBuffer): NodeRef? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeNodeRef.read(buf)
    }

    override fun allocationSize(value: NodeRef?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeNodeRef.allocationSize(value)
        }
    }

    override fun write(
        value: NodeRef?,
        buf: ByteBuffer,
    ) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeNodeRef.write(value, buf)
        }
    }
}

/**
 * @suppress
 */
public object FfiConverterOptionalTypeAttribute : FfiConverterRustBuffer<Attribute?> {
    override fun read(buf: ByteBuffer): Attribute? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeAttribute.read(buf)
    }

    override fun allocationSize(value: Attribute?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeAttribute.allocationSize(value)
        }
    }

    override fun write(
        value: Attribute?,
        buf: ByteBuffer,
    ) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeAttribute.write(value, buf)
        }
    }
}

/**
 * @suppress
 */
public object FfiConverterOptionalTypeConnectOpts : FfiConverterRustBuffer<ConnectOpts?> {
    override fun read(buf: ByteBuffer): ConnectOpts? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeConnectOpts.read(buf)
    }

    override fun allocationSize(value: ConnectOpts?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeConnectOpts.allocationSize(value)
        }
    }

    override fun write(
        value: ConnectOpts?,
        buf: ByteBuffer,
    ) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeConnectOpts.write(value, buf)
        }
    }
}

/**
 * @suppress
 */
public object FfiConverterOptionalTypeMethod : FfiConverterRustBuffer<Method?> {
    override fun read(buf: ByteBuffer): Method? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeMethod.read(buf)
    }

    override fun allocationSize(value: Method?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeMethod.allocationSize(value)
        }
    }

    override fun write(
        value: Method?,
        buf: ByteBuffer,
    ) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeMethod.write(value, buf)
        }
    }
}

/**
 * @suppress
 */
public object FfiConverterOptionalMapStringString : FfiConverterRustBuffer<Map<kotlin.String, kotlin.String>?> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, kotlin.String>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterMapStringString.read(buf)
    }

    override fun allocationSize(value: Map<kotlin.String, kotlin.String>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterMapStringString.allocationSize(value)
        }
    }

    override fun write(
        value: Map<kotlin.String, kotlin.String>?,
        buf: ByteBuffer,
    ) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterMapStringString.write(value, buf)
        }
    }
}

/**
 * @suppress
 */
public object FfiConverterOptionalMapStringTypeJSON : FfiConverterRustBuffer<Map<kotlin.String, Json>?> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, Json>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterMapStringTypeJSON.read(buf)
    }

    override fun allocationSize(value: Map<kotlin.String, Json>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterMapStringTypeJSON.allocationSize(value)
        }
    }

    override fun write(
        value: Map<kotlin.String, Json>?,
        buf: ByteBuffer,
    ) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterMapStringTypeJSON.write(value, buf)
        }
    }
}

/**
 * @suppress
 */
public object FfiConverterSequenceString : FfiConverterRustBuffer<List<kotlin.String>> {
    override fun read(buf: ByteBuffer): List<kotlin.String> {
        val len = buf.getInt()
        return List<kotlin.String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.String>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<kotlin.String>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterString.write(it, buf)
        }
    }
}

/**
 * @suppress
 */
public object FfiConverterSequenceTypeNode : FfiConverterRustBuffer<List<Node>> {
    override fun read(buf: ByteBuffer): List<Node> {
        val len = buf.getInt()
        return List<Node>(len) {
            FfiConverterTypeNode.read(buf)
        }
    }

    override fun allocationSize(value: List<Node>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeNode.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<Node>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeNode.write(it, buf)
        }
    }
}

/**
 * @suppress
 */
public object FfiConverterSequenceTypeNodeRef : FfiConverterRustBuffer<List<NodeRef>> {
    override fun read(buf: ByteBuffer): List<NodeRef> {
        val len = buf.getInt()
        return List<NodeRef>(len) {
            FfiConverterTypeNodeRef.read(buf)
        }
    }

    override fun allocationSize(value: List<NodeRef>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeNodeRef.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<NodeRef>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeNodeRef.write(it, buf)
        }
    }
}

/**
 * @suppress
 */
public object FfiConverterSequenceTypeAttribute : FfiConverterRustBuffer<List<Attribute>> {
    override fun read(buf: ByteBuffer): List<Attribute> {
        val len = buf.getInt()
        return List<Attribute>(len) {
            FfiConverterTypeAttribute.read(buf)
        }
    }

    override fun allocationSize(value: List<Attribute>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeAttribute.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<Attribute>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeAttribute.write(it, buf)
        }
    }
}

/**
 * @suppress
 */
public object FfiConverterMapStringString : FfiConverterRustBuffer<Map<kotlin.String, kotlin.String>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, kotlin.String> {
        val len = buf.getInt()
        return buildMap<kotlin.String, kotlin.String>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterString.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, kotlin.String>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren =
            value
                .map { (k, v) ->
                    FfiConverterString.allocationSize(k) +
                        FfiConverterString.allocationSize(v)
                }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(
        value: Map<kotlin.String, kotlin.String>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterString.write(v, buf)
        }
    }
}

/**
 * @suppress
 */
public object FfiConverterMapStringTypeJSON : FfiConverterRustBuffer<Map<kotlin.String, Json>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, Json> {
        val len = buf.getInt()
        return buildMap<kotlin.String, Json>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterTypeJSON.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, Json>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren =
            value
                .map { (k, v) ->
                    FfiConverterString.allocationSize(k) +
                        FfiConverterTypeJSON.allocationSize(v)
                }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(
        value: Map<kotlin.String, Json>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterTypeJSON.write(v, buf)
        }
    }
}
