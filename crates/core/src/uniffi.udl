namespace LiveViewNativeCore {
};
enum ChangeType {
    "Change",
    "Add",
    "Remove",
    "Replace",
};

[Error]
enum ParseError {
    "Reader",
    "Tokenizer",
};

[Error]
enum RenderError {
    "NoComponents",
    "NoTemplates",
    "TemplateNotFound",
    "ComponentNotFound",
    "MergeError",
    "ChildNotFoundForTemplate",
    "ChildNotFoundForStatic",
    "CousinNotFound",
    "SerdeError",
    "ParseError",
};

interface NodeRef {
};
interface Attribute {
    // Todo: Allow access to name, value and namespace
    //string name;
    //string? value;
};

/*
interface Element {
    string namespace;
    string string;
    sequenc<Attribute> attributes;
};
*/

/*
[Enum]
interface NodeType {
    "Root",
    "Element",
    "Leaf"
};
*/

/*
[Enum]
interface Node {
    "Root",
    //Element(Element),
    Leaf(string data),
}
*/

/*
dictionary Node {
    NodeType ty;
    NodeData data;
};
*/


[Trait]
interface DocumentChangeHandler {
    void handle(
        string context,
        ChangeType change_type,
        NodeRef node_ref,
        NodeRef? option_node_ref
    );
};

interface Document {
    [Throws=ParseError, Name=parse]
    constructor(string input);

    string to_string();

    NodeRef root();
    NodeRef? get_parent(NodeRef ref);

    sequence<NodeRef> children(NodeRef ref);
    sequence<Attribute> attributes(NodeRef ref);

    [Throws=RenderError, Name=parse_fragment_json]
    constructor(
        string input
    );

    [Throws=RenderError]
    void merge_fragment_json(
        string json,
        DocumentChangeHandler handler
    );
};

