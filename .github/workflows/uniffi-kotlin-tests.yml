name: Uniffi Kotlin Package Tests

on: pull_request

env:
  CARGO_TERM_COLOR: always
  TOOLCHAIN: nightly

jobs:
  integration_tests:
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v4
      - name: Install Rust Nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.TOOLCHAIN }}
          targets:
            armv7-linux-androideabi
            aarch64-linux-android
            i686-linux-android
            x86_64-linux-android
            x86_64-unknown-linux-gnu
            aarch64-apple-darwin
            x86_64-apple-darwin

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: ${{ github.workflow }}-${{ github.job }}-toolchain-${{ env.TOOLCHAIN }}-cargo-${{ hashFiles('**/Cargo.lock') }}

# TODO: Fix this when enabling live-channels feature flag.
#      - name: Cache deps
#        id: cache-deps
#        uses: actions/cache@v4
#        env:
#          cache-name: cache-elixir-deps
#        with:
#          path: tests/support/test_server/deps
#          key: ${{ runner.os }}-mix-${{ env.cache-name }}-2-${{ hashFiles('**/mix.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-mix-${{ env.cache-name }}-
#      - name: Cache compiled build
#        id: cache-build
#        uses: actions/cache@v4
#        env:
#          cache-name: cache-compiled-build
#        with:
#          path: tests/support/test_server/_build
#          key: ${{ runner.os }}-mix-${{ env.cache-name }}-2-${{ hashFiles('**/mix.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-mix-${{ env.cache-name }}-
#            ${{ runner.os }}-mix-
#      - name: Set up Elixir
#        run: brew install elixir
#
#      - name: Install test server dependencies, compile and run in background
#        working-directory: ./tests/support/test_server
#        run: |
#          mix deps.get
#          mix compile
#          mix phx.server &

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install gradle
        uses: gradle/gradle-build-action@v3.2.1

      # https://github.com/actions/runner-images/blob/5a9870800dc54127d22ee36c303b47314d231c69/images/macos/macos-14-arm64-Readme.md
      # There's no python in the m1 macos runners.
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Run build with Gradle wrapper
        working-directory: ./crates/core/liveview-native-core-jetpack/
        run:
          RANLIB=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/darwin-x86_64/bin/llvm-ranlib ./gradlew build --scan
