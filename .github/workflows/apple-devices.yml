# based on https://gist.github.com/learnopengles/60c945b92fbe60a0fecaa0143c35c4a for testing in simulator
name: Apple Simulator devices

on: pull_request

env:
  TOOLCHAIN: nightly
  CARGO_TERM_COLOR: always
  CARGO_DINGHY_REV: "a8ec5b0"

jobs:
  integration_tests:
    # rust cross-compilation
    runs-on: macos-13
    strategy:
      matrix:
        rust-target: ["x86_64-apple-ios" ]
        apple-sim: [ "iOS" ]
        include:
          - rust-target: "x86_64-apple-tvos"
            apple-sim: "tvOS"
          - rust-target: "x86_64-apple-watchos-sim"
            apple-sim: "watchOS"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.TOOLCHAIN }}
          components: rust-src
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: ${{ github.workflow }}-${{ github.job }}-toolchain-${{ env.TOOLCHAIN }}-cargo-${{ env.CARGO_DINGHY_REV }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Install cargo-dinghy
        run: |
          if ! command -v cargo-dinghy &> /dev/null; then
            cargo install --git https://github.com/liveview-native/dinghy.git --force --rev ${CARGO_DINGHY_REV} cargo-dinghy
          fi

      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v4
        env:
          cache-name: cache-elixir-deps
        with:
          path: tests/support/test_server/deps
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-2-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
      - name: Cache compiled build
        id: cache-build
        uses: actions/cache@v4
        env:
          cache-name: cache-compiled-build
        with:
          path: tests/support/test_server/_build
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-2-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
            ${{ runner.os }}-mix-
      - name: Set up Elixir
        run: brew install elixir

      - name: Install test server dependencies, compile and run in background
        working-directory: ./tests/support/test_server
        run: |
          mix deps.get
          mix compile
          mix phx.server &

      - name: Start Simulator
        uses: futureware-tech/simulator-action@v3
        with:
          os: ${{ matrix.apple-sim }}

      - name: Run Rust tests on simulator for ${{ matrix.rust-target }}
        env:
          DINGHY_LOG: debug
        timeout-minutes: 20
        run: |
          cargo dinghy all-platforms
          cargo dinghy all-devices
          cargo -Zbuild-std test --target ${{ matrix.rust-target }}
