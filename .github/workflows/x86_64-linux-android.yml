# based on https://github.com/xaynetwork/cargo_tai
name: x86_64-linux-android

on: pull_request

env:
  ANDROID_API: 33
  ANDROID_NDK_VERSION: 25.2.9519653
  TOOLCHAIN: nightly
  CARGO_TERM_COLOR: always
  CARGO_DINGHY_REV: "3950414"

jobs:
  integration_tests:
    # rust cross-compilation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust Nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.TOOLCHAIN }}
          target: x86_64-linux-android
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: ${{ github.workflow }}-${{ github.job }}-toolchain-${{ env.TOOLCHAIN }}-${{ env.CARGO_DINGHY_REV }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-dinghy
        run: |
          if ! command -v cargo-dinghy &> /dev/null; then
            cargo install --git https://github.com/sonos/dinghy.git --force --rev ${CARGO_DINGHY_REV} cargo-dinghy
          fi

      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v4
        env:
          cache-name: cache-elixir-deps
        with:
          path: tests/support/test_server/deps
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-deps-${{ hashFiles('**/mix.lock') }}

      - name: Cache compiled build
        id: cache-build
        uses: actions/cache@v4
        env:
          cache-name: cache-compiled-build
        with:
          path: tests/support/test_server/_build
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-build-${{ hashFiles('**/mix.lock') }}

      - uses: erlef/setup-beam@v1
        with:
          elixir-version:  1.15
          otp-version: 25

      - name: Install test server dependencies, compile and run in background
        working-directory: ./tests/support/test_server
        run: |
          mix deps.get
          mix compile
          mix phx.server &

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ env.ANDROID_API }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.ANDROID_API }}
          ndk: ${{ env.ANDROID_NDK_VERSION }}
          force-avd-creation: false
          target: google_apis
          arch: x86_64
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Run tests in android emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.ANDROID_API }}
          ndk: ${{ env.ANDROID_NDK_VERSION }}
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            cargo dinghy all-platforms
            cargo dinghy all-devices
            RANLIB=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib cargo dinghy -p auto-android-x86_64-api${ANDROID_API} test -- --test-threads 1
