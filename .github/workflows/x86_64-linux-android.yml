# based on https://github.com/xaynetwork/cargo_tai
name: x86_64-linux-android

on: pull_request

env:
  ANDROID_API: 33
  ANDROID_NDK_VERSION: 26.1.10909125
  ANDROID_SYSTEM_IMAGE_PACKAGE: system-images;android-33;google_apis_playstore;x86_64
  TOOLCHAIN: nightly
  CARGO_TERM_COLOR: always

jobs:
  integration_tests:
    # rust cross-compilation
    runs-on: macos-13

    steps:
      - name: Add Android home and subdirectories to environment
        run: |
          echo "${ANDROID_HOME}/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "${ANDROID_HOME}/emulator" >> $GITHUB_PATH
          echo "${ANDROID_HOME}/platform-tools" >> $GITHUB_PATH
      - name: sdkmanager setup
        run: |
          yes | sdkmanager --licenses
          sdkmanager --install "platform-tools" \
                               "platforms;android-${ANDROID_API}" \
                               "build-tools;${ANDROID_API}.0.2" \
                               "emulator" \
                               "ndk;${ANDROID_NDK_VERSION}" \
                               "${ANDROID_SYSTEM_IMAGE_PACKAGE}"
      - name: Create Android Virtual Device
        run: |
          echo no | \
            avdmanager create avd --force \
                                  --name AVD \
                                  --abi google_apis_playstore/x86_64 \
                                  --package "${ANDROID_SYSTEM_IMAGE_PACKAGE}"

      - name: Start Android Emulator and background the process.
        timeout-minutes: 20
        run: |
          echo "Starting ADB server"
          ${ANDROID_HOME}/platform-tools/adb start-server
          echo "Starting Emulator"
          ${ANDROID_HOME}/emulator/emulator -avd AVD -netdelay none -netspeed full -no-boot-anim -no-window -noaudio -accel auto -verbose &

      - uses: actions/checkout@v4
      - name: Install Rust Nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.TOOLCHAIN }}
          target: x86_64-linux-android
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: ${{ github.workflow }}-${{ github.job }}-toolchain-${{ env.TOOLCHAIN }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-dinghy

      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v4
        env:
          cache-name: cache-elixir-deps
        with:
          path: tests/support/test_server/deps
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-2-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-

      - name: Cache compiled build
        id: cache-build
        uses: actions/cache@v4
        env:
          cache-name: cache-compiled-build
        with:
          path: tests/support/test_server/_build
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-2-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
            ${{ runner.os }}-mix-

      - name: Set up Elixir
        run: brew install elixir

      - name: Install test server dependencies, compile and run in background
        working-directory: ./tests/support/test_server
        run: |
          mix deps.get
          mix compile
          mix phx.server &

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
      # https://github.com/sfackler/rust-openssl/issues/1402
      - name: Add android clang tools to PATH
        run: |
          echo "${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/darwin-x86_64/bin" >> $GITHUB_PATH

      - name: Ensure Android device has started
        timeout-minutes: 20
        run: |
          ${ANDROID_HOME}/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
          ${ANDROID_HOME}/platform-tools/adb devices

      - name: Test with cargo-dinghy
        run: |
          cargo dinghy all-platforms
          cargo dinghy all-devices
          RANLIB=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/darwin-x86_64/bin/llvm-ranlib cargo dinghy -p auto-android-x86_64-api${ANDROID_API} test
