name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

env:
  CARGO_TERM_COLOR: always
  TOOLCHAIN: nightly
  CARGO_MAKE_TOOLCHAIN: nightly
  ANDROID_API: 34
  ANDROID_NDK_VERSION: 26.3.11579264
  HOMEBREW_NO_AUTO_UPDATE: 1

jobs:
  kotiln_integration_tests:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [
          'macos-14',
          'ubuntu-24.04',
        ]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust Nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.TOOLCHAIN }}
          targets:
            armv7-linux-androideabi
            aarch64-linux-android
            i686-linux-android
            x86_64-linux-android
            x86_64-unknown-linux-gnu
            aarch64-apple-darwin
            x86_64-apple-darwin

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: ${{matrix.os}}-${{ github.workflow }}-${{ github.job }}-toolchain-${{ env.TOOLCHAIN }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Elixir
        if: ${{ matrix.os == 'macos-14' }}
        run: brew install elixir

      - name: Cache mix dependencies and build
        if: ${{ matrix.os == 'macos-14' }}
        uses: actions/cache@v4
        id: mix-cache
        with:
          path: |
            tests/support/test_server/_build/
            tests/support/test_server/deps/
          key: mix-${{ github.workflow }}-${{ runner.os }}-${{runner.arch}}

      - name: Install test server dependencies, compile and run in background
        if: ${{ matrix.os == 'macos-14' }}
        working-directory: ./tests/support/test_server
        run: |
          mix deps.get
          mix compile
          mix phx.server &

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install gradle
        uses: gradle/actions/setup-gradle@v3

      # https://github.com/actions/runner-images/blob/5a9870800dc54127d22ee36c303b47314d231c69/images/macos/macos-14-arm64-Readme.md
      # Python is required to build OpenSSL but there's no python in the m1
      # macos runners.
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Run build with Gradle wrapper
        if: ${{ matrix.os == 'macos-14' }}
        working-directory: ./crates/core/liveview-native-core-jetpack/
        env:
          RANLIB: "${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/darwin-x86_64/bin/llvm-ranlib"
        run:
           ./gradlew build --scan

      - name: Run build with Gradle wrapper
        if: ${{ matrix.os == 'ubuntu-24.04' }}
        working-directory: ./crates/core/liveview-native-core-jetpack/
        env:
          RANLIB: "${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"
        run:
           ./gradlew build --scan -x test

  swift_build_xcframework:
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v4
      - name: Install Rust Nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.TOOLCHAIN }}
          components: rust-src
          targets:
            aarch64-apple-ios-sim
            aarch64-apple-ios
            x86_64-apple-ios
            aarch64-apple-darwin
            x86_64-apple-darwin

      - uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: latest-stable

      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-make

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: ${{ github.workflow }}-${{ github.job }}-toolchain-${{ env.TOOLCHAIN }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Generate the swift package
        run: cargo make uniffi-swift-package

      - uses: actions/upload-artifact@v4
        with:
          retention-days: 5
          name: LiveViewNativeCore-Source
          path: ./crates/core/liveview-native-core-swift/Sources/LiveViewNativeCore

      - name: Test swift package
        run: cargo make uniffi-xcframework

      - uses: actions/upload-artifact@v4
        with:
          retention-days: 5
          name: liveview_native_core.xcframework
          path: ./target/uniffi/swift/liveview_native_core.xcframework

  swift_integration_tests:
    continue-on-error: true
    runs-on: macos-14
    needs:
      - swift_build_xcframework
    strategy:
      fail-fast: false
      matrix:
        swift-test: [
          "package",
          "tvos",
          "watchos",
          "macos",
          "ios",
          "visionos",
        ]


    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: liveview_native_core.xcframework
          path: ./target/uniffi/swift/liveview_native_core.xcframework

      - uses: actions/download-artifact@v4
        with:
          name: LiveViewNativeCore-Source
          path: ./crates/core/liveview-native-core-swift/Sources/LiveViewNativeCore

      - name: Check artifact downloads
        run: |
          ls ./target/uniffi/swift/ ./target/uniffi/swift/liveview_native_core.xcframework ./crates/core/liveview-native-core-swift/Sources/LiveViewNativeCore/ ./crates/core/liveview-native-core-swift/Sources/LiveViewNativeCore/*

      - uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: latest-stable

      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-make

      - name: Set up Elixir
        run: brew install elixir

      - name: Cache mix dependencies and build
        uses: actions/cache@v4
        id: mix-cache
        with:
          path: |
            tests/support/test_server/_build/
            tests/support/test_server/deps/
          key: mix-${{ github.workflow }}-${{ runner.os }}-${{runner.arch}}

      - name: Install test server dependencies, compile and run in background
        working-directory: ./tests/support/test_server
        run: |
          mix deps.get
          mix compile
          mix phx.server &

      - name: Cache xcode builds for ${{matrix.swift-test}}
        uses: actions/cache@v4
        id: xcode-build-cache
        with:
          path: |
            xcode-build/
          key: xcode-build-${{ github.workflow }}-${{ runner.os }}-${{runner.arch}}-${{matrix.swift-test}}

      - name: Test swift package
        run: cargo make uniffi-swift-test-${{matrix.swift-test}}

  integration_tests:
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v4
      - name: Install Rust Nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.TOOLCHAIN }}
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: ${{ github.workflow }}-${{ github.job }}-toolchain-${{ env.TOOLCHAIN }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Elixir
        run: brew install elixir

      - name: Cache mix dependencies and build
        uses: actions/cache@v4
        id: mix-cache
        with:
          path: |
            tests/support/test_server/_build/
            tests/support/test_server/deps/
          key: mix-${{ github.workflow }}-${{ runner.os }}-${{runner.arch}}

      - name: Install test server dependencies, compile and run in background
        working-directory: ./tests/support/test_server
        run: |
          mix deps.get
          mix compile
          mix phx.server &

      - name: Get the JNA jar for testing kotlin.
        run: wget 'https://repo1.maven.org/maven2/net/java/dev/jna/jna/5.14.0/jna-5.14.0.jar'

      - name: Build tests
        run: cargo test --no-run

      - name: Run Test
        timeout-minutes: 5
        run: cargo test
        env:
          # This is required for the kotlin uniffi tests
          CLASSPATH: "/Users/runner/work/liveview-native-core/liveview-native-core/jna-5.14.0.jar:/opt/homebrew/opt/kotlin/libexec/lib/kotlinx-coroutines-core-jvm.jar"

  apple_simulator_tests:
    # rust cross-compilation
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        rust-target: ["aarch64-apple-ios-sim" ]
        apple-sim: [ "iOS" ]
        os: [ macos-14 ]
        include:
          - rust-target: "aarch64-apple-tvos-sim"
            os: macos-14
            apple-sim: "tvOS"
          - rust-target: "aarch64-apple-watchos-sim"
            os: macos-14
            apple-sim: "watchOS"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.TOOLCHAIN }}
          components: rust-src
          targets: aarch64-apple-ios-sim
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: ${{ github.workflow }}-${{ runner.os }}-${{ runner.arch }}-${{ github.job }}-toolchain-${{ env.TOOLCHAIN }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-dinghy@0.7.1

      - name: Start Simulator
        uses: futureware-tech/simulator-action@v3
        with:
          os: ${{ matrix.apple-sim }}

      - name: Set up Elixir
        run: brew install elixir

      - name: Cache mix dependencies and build
        uses: actions/cache@v4
        id: mix-cache
        with:
          path: |
            tests/support/test_server/_build/
            tests/support/test_server/deps/
          key: mix-${{ github.workflow }}-${{ runner.os }}-${{runner.arch}}

      - name: Install test server dependencies, compile and run in background
        working-directory: ./tests/support/test_server
        run: |
          mix deps.get
          mix compile
          mix phx.server &

      - name: Build tests
        if: ${{ matrix.apple-sim == 'iOS' }}
        run: cargo test --target ${{ matrix.rust-target }} --no-run

      - name: Build tests
        if: ${{ matrix.apple-sim == 'tvOS' || matrix.apple-sim == 'watchOS' }}
        run: cargo -Zbuild-std test --target ${{ matrix.rust-target }} --no-run

      - name: Run Rust tests on simulator for ${{ matrix.rust-target }}
        if: ${{ matrix.apple-sim == 'tvOS' || matrix.apple-sim == 'watchOS' }}
        env:
          DINGHY_LOG: debug
        timeout-minutes: 30
        run: |
          cargo -Zbuild-std test --target ${{ matrix.rust-target }} -- --test-threads 1

      - name: Run Rust tests on simulator for ${{ matrix.rust-target }}
        if: ${{ matrix.apple-sim == 'iOS' }}
        env:
          DINGHY_LOG: debug
        timeout-minutes: 30
        run: |
          cargo test --target ${{ matrix.rust-target }} -- --test-threads 1

  android_simulator_tests:
    # rust cross-compilation
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust Nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.TOOLCHAIN }}
          target: x86_64-linux-android
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: ${{ github.workflow }}-${{ github.job }}-toolchain-${{ env.TOOLCHAIN }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-dinghy@0.7.1

      - uses: erlef/setup-beam@v1
        with:
          elixir-version:  1.15
          otp-version: 25

      - name: Cache mix dependencies and build
        uses: actions/cache@v4
        id: mix-cache
        with:
          path: |
            tests/support/test_server/_build/
            tests/support/test_server/deps/
          key: mix-${{ github.workflow }}-${{ runner.os }}-${{runner.arch}}

      - name: Install test server dependencies, compile and run in background
        working-directory: ./tests/support/test_server
        run: |
          mix deps.get
          mix compile
          mix phx.server &

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ env.ANDROID_API }}-${{ github.workflow }}-${{ github.job }}

      - name: Create directory for avd
        # This shouldn't be necesary but this is a work around for
        # https://github.com/ReactiveCircus/android-emulator-runner/issues/197
        if: steps.avd-cache.outputs.cache-hit != 'true'
        run:
          mkdir -p ~/.android/avd

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2.31.0
        with:
          api-level: ${{ env.ANDROID_API }}
          ndk: ${{ env.ANDROID_NDK_VERSION }}
          force-avd-creation: false
          target: google_apis
          arch: x86_64
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Run tests in android emulator
        uses: reactivecircus/android-emulator-runner@v2.31.0
        env:
          RANLIB: "${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"
        with:
          api-level: ${{ env.ANDROID_API }}
          ndk: ${{ env.ANDROID_NDK_VERSION }}
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            cargo dinghy all-platforms
            cargo dinghy all-devices
            cargo dinghy -p auto-android-x86_64-api${ANDROID_API} test -- --test-threads 1
