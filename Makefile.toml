[config]
skip_core_tasks = true
skip_git_env_info = true
init_task = "init"

[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
CARGO_MAKE_CARGO_VERBOSE_FLAGS = { source = "${CARGO_MAKE_CI}", default_value = "", mapping = { "true" = "--verbose" } }
CARGO_MAKE_RUST_SCRIPT_PROVIDER = "rust-script"
CARGO_MAKE_USE_WORKSPACE_PROFILE = true
CARGO_MAKE_CARGO_BUILD_TEST_FLAGS = "--no-fail-fast"
CARGO_TARGET_DIR = { value = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target", condition = { env_not_set = ["CARGO_TARGET_DIR"] } }
CARGO_MAKE_TOOLCHAIN_DEFAULT = { source = "${CARGO_MAKE_CI}", default_value = "nightly" }
CARGO_MAKE_TOOLCHAIN = { value = "${CARGO_MAKE_TOOLCHAIN_DEFAULT}", condition = { env_not_set = ["CARGO_MAKE_TOOLCHAIN"] } }
CARGO_BUILD_TYPE = { source = "${CARGO_MAKE_PROFILE}", default_value = "debug", mapping = { "development" = "debug", "release" = "release" } }
CARGO_PROFILE = { source = "${CARGO_BUILD_TYPE}", mapping = { "debug" = "dev", "release" = "release" } }
BACKTRACE_DEFAULT = { source = "${CARGO_MAKE_CI}", mapping = { "true" = "1", "false" = "0" } }
RUST_BACKTRACE = { value = "${BACKTRACE_DEFAULT}", condition = { env_not_set = ["RUST_BACKTRACE"] } }

[tasks.init]
condition = { env_set = ["VERBOSE"] }
run_task = "print-env"

[tasks.default]
description = "Empty Task"

[tasks.print-env]
category = "Tools"
run_task = [{ name = ["print-build-env", "print-ci-env", "print-rust-env", "print-cargo-env"] }]

[tasks.print-build-env]
private = true
script = [
'''
#!@duckscript
echo "*************************************"
echo "Build Environment:"
echo "    Task: ${CARGO_MAKE_TASK}"
echo "    Task Arguments: ${CARGO_MAKE_TASK_ARGS}"
echo "    Command: ${CARGO_MAKE_COMMAND}"
echo "    Working Directory: ${CARGO_MAKE_WORKING_DIRECTORY}"
echo "    Target Directory: ${CARGO_TARGET_DIR}"
echo "    Target Triple: ${CARGO_MAKE_RUST_TARGET_TRIPLE}"
echo ""
echo "    RUST_BACKTRACE: ${RUST_BACKTRACE}"
echo "*************************************"
'''
]

[tasks.print-ci-env]
private = true
condition = { env = { "CARGO_MAKE_CI" = "true" } }
script = [
'''
#!@duckscript
echo "*************************************"
echo "CI:"
echo "    CI: ${CARGO_MAKE_CI}"
echo "    PR: ${CARGO_MAKE_PR}"
echo "    Branch Name: ${CARGO_MAKE_CI_BRANCH_NAME}"
echo "    CI Vendor: ${CARGO_MAKE_CI_VENDOR}"
echo "*************************************"
'''
]

[tasks.print-rust-env]
category = "Tools"
condition = { env_set = [ "CARGO_MAKE_RUST_CHANNEL" ] }
script = [
'''
#!@duckscript
echo "*************************************"
echo "Rust:"
echo "    Version: ${CARGO_MAKE_RUST_VERSION}"
echo "    Channel: ${CARGO_MAKE_RUST_CHANNEL}"
echo "    Toolchain: ${CARGO_MAKE_TOOLCHAIN}"
echo "    Target Arch: ${CARGO_MAKE_RUST_TARGET_ARCH}"
echo "    Target Env: ${CARGO_MAKE_RUST_TARGET_ENV}"
echo "    Target OS: ${CARGO_MAKE_RUST_TARGET_OS}"
echo "    Pointer Width: ${CARGO_MAKE_RUST_TARGET_POINTER_WIDTH}"
echo "    Target Triple: ${CARGO_MAKE_RUST_TARGET_TRIPLE}"
echo "*************************************"
'''
]

[tasks.print-cargo-env]
category = "Tools"
condition = { env_set = [ "CARGO_MAKE_CARGO_HOME" ] }
script = [
'''
#!@duckscript
echo "*************************************"
echo "Cargo:"
echo "    Home: ${CARGO_MAKE_CARGO_HOME}"
echo "    Profile: ${CARGO_MAKE_PROFILE}"
echo "*************************************"
'''
]

[tasks.create-lipo-universal-directories]
workspace = false
private = true
command = "mkdir"
args = [
    "-p",
    "${CARGO_TARGET_DIR}/universal/macos/",
    "${CARGO_TARGET_DIR}/universal/ios-sim/",
    "${CARGO_TARGET_DIR}/universal/watchos-sim/",
    "${CARGO_TARGET_DIR}/universal/watchos/",
    "${CARGO_TARGET_DIR}/universal/tvos-sim/",
]

[tasks.build-apple-std-targets]
workspace = false
category = "Build"
description = "Compiles for all targets needed to produce a universal library for macOS"
command = "rustup"
args = [
    "run", "${CARGO_MAKE_TOOLCHAIN}",
    "cargo", "build",
    "--profile", "${CARGO_PROFILE}",
    "@@remove-empty(CARGO_MAKE_CARGO_VERBOSE_FLAGS)",
    "--target", "aarch64-apple-darwin",
    "--target", "x86_64-apple-darwin",

    "--target", "aarch64-apple-ios",
    "--target", "aarch64-apple-ios-sim",
    "--target", "x86_64-apple-ios",

    "-p", "liveview-native-core"
]
dependencies = ["install-targets"]


[tasks.build-apple-no-std-targets]
workspace = false
category = "Build"
description = "Compiles for all targets needed to produce a universal library for watchOS and tvOS"
command = "rustup"
args = [
    "run", "${CARGO_MAKE_TOOLCHAIN}",
    "cargo", "build",
    "--profile", "${CARGO_PROFILE}",
    "@@remove-empty(CARGO_MAKE_CARGO_VERBOSE_FLAGS)",
    "-Z", "build-std",

    "--target", "arm64_32-apple-watchos",
    "--target", "aarch64-apple-watchos-sim",
    "--target", "aarch64-apple-watchos",
    "--target", "x86_64-apple-watchos-sim",

    "--target", "aarch64-apple-visionos",
    "--target", "aarch64-apple-visionos-sim",

    "--target", "aarch64-apple-tvos",
    "--target", "aarch64-apple-tvos-sim",
    "--target", "x86_64-apple-tvos",
    "-p", "liveview-native-core"
]

[tasks.lipo-macos]
dependencies = ["create-lipo-universal-directories", "build-apple-std-targets"]
workspace = false
category = "Build"
description = "Combines macOS targets into a universal binary"
command = "xcrun"
args = [
    "lipo", "-create",
    "${CARGO_TARGET_DIR}/aarch64-apple-darwin/${CARGO_BUILD_TYPE}/libliveview_native_core.a",
    "${CARGO_TARGET_DIR}/x86_64-apple-darwin/${CARGO_BUILD_TYPE}/libliveview_native_core.a",
    "-output", "${CARGO_TARGET_DIR}/universal/macos/libliveview_native_core.a"
]

[tasks.lipo-ios-sim]
dependencies = ["create-lipo-universal-directories", "build-apple-std-targets"]
workspace = false
category = "Build"
description = "Combines iOS simulator targets into a universal binary"
command = "xcrun"
args = [
    "lipo",
    "-create",
    "${CARGO_TARGET_DIR}/aarch64-apple-ios-sim/${CARGO_BUILD_TYPE}/libliveview_native_core.a",
    "${CARGO_TARGET_DIR}/x86_64-apple-ios/${CARGO_BUILD_TYPE}/libliveview_native_core.a",
    "-output", "${CARGO_TARGET_DIR}/universal/ios-sim/libliveview_native_core.a"
]

[tasks.lipo-tvos-sim]
dependencies = ["create-lipo-universal-directories", "build-apple-no-std-targets"]
workspace = false
category = "Build"
description = "Combines iOS simulator targets into a universal binary"
command = "xcrun"
args = [
    "lipo",
    "-create",
    "${CARGO_TARGET_DIR}/aarch64-apple-tvos-sim/${CARGO_BUILD_TYPE}/libliveview_native_core.a",
    "${CARGO_TARGET_DIR}/x86_64-apple-tvos/${CARGO_BUILD_TYPE}/libliveview_native_core.a",
    "-output", "${CARGO_TARGET_DIR}/universal/tvos-sim/libliveview_native_core.a"
]

[tasks.lipo-watchos]
dependencies = ["create-lipo-universal-directories", "build-apple-no-std-targets"]
workspace = false
category = "Build"
description = "Combines watchOS simulator targets into a universal binary"
command = "xcrun"
args = [
    "lipo", "-create",
    "${CARGO_TARGET_DIR}/aarch64-apple-watchos/${CARGO_BUILD_TYPE}/libliveview_native_core.a",
    "${CARGO_TARGET_DIR}/arm64_32-apple-watchos/${CARGO_BUILD_TYPE}/libliveview_native_core.a",
    "-output", "${CARGO_TARGET_DIR}/universal/watchos/libliveview_native_core.a"
]

[tasks.lipo-watchos-sim]
dependencies = ["create-lipo-universal-directories", "build-apple-no-std-targets"]
workspace = false
category = "Build"
description = "Combines watchOS simulator targets into a universal binary"
command = "xcrun"
args = [
    "lipo", "-create",
    "${CARGO_TARGET_DIR}/aarch64-apple-watchos-sim/${CARGO_BUILD_TYPE}/libliveview_native_core.a",
    "${CARGO_TARGET_DIR}/x86_64-apple-watchos-sim/${CARGO_BUILD_TYPE}/libliveview_native_core.a",
    "-output", "${CARGO_TARGET_DIR}/universal/watchos-sim/libliveview_native_core.a"
]

[tasks.install-targets]
workspace = false
private = true
description = "Installs all toolchain targets needed for packaging"
command = "rustup"
args = [
    "target", "add", "--toolchain", "${CARGO_MAKE_TOOLCHAIN}",
    "aarch64-apple-darwin",
    "x86_64-apple-darwin",
    "aarch64-apple-ios",
    "aarch64-apple-ios-sim",
    "x86_64-apple-ios"
]

[tasks.clean]
category = "Build"
description = "Clean build artifacts"
dependencies = ["clean-rust", "clean-swift"]

[tasks.clean-rust]
category = "Build"
command = "cargo"
args = ["clean"]

[tasks.test]
category = "Test"
description = "Runs all tests"
dependencies = ["test-rust", "test-swift"]

[tasks.test-rust]
category = "Test"
description = "Runs tests written in Rust"
command = "rustup"
args = [
    "run", "${CARGO_MAKE_TOOLCHAIN}",
    "cargo", "test",
    "@@remove-empty(CARGO_MAKE_CARGO_VERBOSE_FLAGS)",
    "@@split(CARGO_MAKE_CARGO_BUILD_TEST_FLAGS, )",
    "${@}"
]

[tasks.bloat]
category = "Development"
description = "Run cargo-bloat"
command = "cargo"
args = ["bloat", "${@}"]

[tasks.build-default-staticlib]
workspace = false
category = "Build"
description = "Compiles for all targets needed to produce a universal library for macOS"
command = "rustup"
args = [
    "run", "${CARGO_MAKE_TOOLCHAIN}",
    "cargo", "build",
    "--profile", "${CARGO_PROFILE}",
    "-p", "liveview-native-core"
]
[tasks.uniffi-swift-generate]
workspace = false
category = "Packaging"
description = ""
command = "cargo"
args = [
    "run",
    "-p",
    "uniffi-bindgen",
    "--",
    "generate",
    "--library",
    "${CARGO_TARGET_DIR}/${CARGO_BUILD_TYPE}/libliveview_native_core.a",
    "--language=swift",
    "--out-dir=${CARGO_TARGET_DIR}/uniffi/swift/generated",
]
dependencies = ["build-default-staticlib"]

[tasks.uniffi-swift-modulemap]
workspace = false
category = "Packaging the module maps for FFIs"
description = ""
script_runner = "@shell"
script = '''
cat ${CARGO_TARGET_DIR}/uniffi/swift/generated/LiveViewNativeCoreFFI.modulemap \
    ${CARGO_TARGET_DIR}/uniffi/swift/generated/PhoenixChannelsClientFFI.modulemap \
    > \
    ${CARGO_TARGET_DIR}/uniffi/swift/generated/module.modulemap
'''
dependencies = ["uniffi-swift-generate"]

[tasks.uniffi-swift-package]
workspace = false
category = "Packaging"
description = "Generates the swift package from the liveview native core and phoenix-channels-clients bindings"
dependencies = ["uniffi-swift-generate", "uniffi-swift-modulemap", "uniffi-swift-package-lvn", "uniffi-swift-package-phoenix"]

[tasks.uniffi-swift-package-lvn]
workspace = false
category = "Packaging"
description = "Copy the generated swift bindings for LiveViewNativeCore to the correct location."
command = "cp"
args = [
    "${CARGO_TARGET_DIR}/uniffi/swift/generated/LiveViewNativeCore.swift",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/crates/core/liveview-native-core-swift/Sources/LiveViewNativeCore/LiveViewNativeCore.swift",
]
[tasks.uniffi-swift-package-phoenix]
workspace = false
category = "Packaging"
description = "Copy the swift bindings for PhoenixChannelsClient to the right location."
command = "cp"
args = [
    "${CARGO_TARGET_DIR}/uniffi/swift/generated/PhoenixChannelsClient.swift",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/crates/core/liveview-native-core-swift/Sources/LiveViewNativeCore/PhoenixChannelsClient.swift",
]
[tasks.uniffi-xcframework-zip]
workspace = false
category = "Packaging"
description = "Generates zip of liveview_native_core.xcframework"
command = "ditto"
args = [
    "-c", "-k", "--sequesterRsrc", "--keepParent",
    "target/uniffi/swift/liveview_native_core.xcframework/",
    "target/uniffi/swift/liveview_native_core.xcframework.zip"
]
dependencies = [
    "uniffi-xcframework",
]

[tasks.uniffi-xcframework]
workspace = false
category = "Packaging"
description = "Generates the LiveViewNativeCore.xcframework package"
command = "xcodebuild"
args = [
    "-create-xcframework",
    "-output", "${CARGO_TARGET_DIR}/uniffi/swift/liveview_native_core.xcframework",

    # macOS
    "-library", "${CARGO_TARGET_DIR}/universal/macos/libliveview_native_core.a",
    "-headers", "${CARGO_TARGET_DIR}/uniffi/swift/generated",

    # iOS
    "-library", "${CARGO_TARGET_DIR}/aarch64-apple-ios/${CARGO_BUILD_TYPE}/libliveview_native_core.a",
    "-headers", "${CARGO_TARGET_DIR}/uniffi/swift/generated",

    # iOS sim
    "-library", "${CARGO_TARGET_DIR}/universal/ios-sim/libliveview_native_core.a",
    "-headers", "${CARGO_TARGET_DIR}/uniffi/swift/generated",

    # watchOS sim
    "-library", "${CARGO_TARGET_DIR}/universal/watchos-sim/libliveview_native_core.a",
    "-headers", "${CARGO_TARGET_DIR}/uniffi/swift/generated",

    # watchOS
    "-library", "${CARGO_TARGET_DIR}/universal/watchos/libliveview_native_core.a",
    "-headers", "${CARGO_TARGET_DIR}/uniffi/swift/generated",

    # tvOS
    "-library", "${CARGO_TARGET_DIR}/aarch64-apple-tvos/${CARGO_BUILD_TYPE}/libliveview_native_core.a",
    "-headers", "${CARGO_TARGET_DIR}/uniffi/swift/generated",

    # tvOS sim
    "-library", "${CARGO_TARGET_DIR}/universal/tvos-sim/libliveview_native_core.a",
    "-headers", "${CARGO_TARGET_DIR}/uniffi/swift/generated",

    # visionOS
    "-library", "${CARGO_TARGET_DIR}/aarch64-apple-visionos/${CARGO_BUILD_TYPE}/libliveview_native_core.a",
    "-headers", "${CARGO_TARGET_DIR}/uniffi/swift/generated",

    # visionOS sim
    "-library", "${CARGO_TARGET_DIR}/aarch64-apple-visionos-sim/${CARGO_BUILD_TYPE}/libliveview_native_core.a",
    "-headers", "${CARGO_TARGET_DIR}/uniffi/swift/generated",
]
dependencies = [
    "build-apple-std-targets",
    "lipo-macos",
    "lipo-ios-sim",
    "build-apple-no-std-targets",
    "lipo-watchos-sim",
    "lipo-watchos",
    "lipo-tvos-sim",
    "remove-existing-uniffi-xcframework",
    "uniffi-swift-package",
]

[tasks.remove-existing-uniffi-xcframework]
workspace = false
private = true
script_runner = "@duckscript"
script = "rm -r ${CARGO_TARGET_DIR}/uniffi/swift/liveview_native_core.xcframework"

[tasks.uniffi-swift-test]
dependencies = [
    "uniffi-swift-package",
    "uniffi-xcframework",
    "uniffi-swift-test-package",
    "uniffi-swift-test-tvos",
    "uniffi-swift-test-ios",
    "uniffi-swift-test-macos",
    "uniffi-swift-test-watchos",
    "uniffi-swift-test-visionos", # TODO: uncomment this when the default xcode is 15.2 for github CI images.
]

[tasks.uniffi-swift-test-package]
workspace = false
category = "Testing"
description = "Generates the LiveViewNativeCore.xcframework package"
command = "swift"
args = [
    "test",
    "--package-path",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}",
]
dependencies = []
[tasks.uniffi-swift-test-tvos]
workspace = false
category = "Testing"
description = "Generates the LiveViewNativeCore.xcframework package"
command = "xcodebuild"
args = [
    "-scheme",
    "LiveViewNativeCore",
    "-destination",
    "name=Apple TV 4K (3rd generation),arch=x86_64",
    "-workspace",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}",
    "-derivedDataPath",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/xcode-build",
    "test"
]
dependencies = []

[tasks.uniffi-swift-test-ios]
workspace = false
category = "Packaging"
description = "Generates the LiveViewNativeCore.xcframework package"
command = "xcodebuild"
args = [
    "-scheme",
    "LiveViewNativeCore",
    "-destination",
    "name=iPhone 15",
    "-workspace",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}",
    "-derivedDataPath",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/xcode-build",
    "test"
]
dependencies = []

[tasks.uniffi-swift-test-watchos]
workspace = false
category = "Packaging"
description = "Generates the LiveViewNativeCore.xcframework package"
command = "xcodebuild"
args = [
    "-scheme",
    "LiveViewNativeCore",
    "-destination",
    "name=Apple Watch Series 9 (45mm)",
    "-workspace",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}",
    "-derivedDataPath",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/xcode-build",
    "test"
]
dependencies = []

[tasks.uniffi-swift-test-visionos]
workspace = false
category = "Packaging"
description = "Generates the LiveViewNativeCore.xcframework package"
command = "xcodebuild"
args = [
    "-scheme",
    "LiveViewNativeCore",
    "-destination",
    "name=Apple Vision Pro",
    "-workspace",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}",
    "-derivedDataPath",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/xcode-build",
    "test"
]
dependencies = []

[tasks.uniffi-swift-test-macos]
workspace = false
category = "Packaging"
description = "Generates the LiveViewNativeCore.xcframework package"
command = "xcodebuild"
args = [
    "-scheme",
    "LiveViewNativeCore",
    "-destination",
    "platform=macOS",
    "-workspace",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}",
    "-derivedDataPath",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/xcode-build",
    "test"
]
dependencies = []
